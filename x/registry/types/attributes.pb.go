// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vulcanize/registry/v1beta1/attributes.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ServiceProviderRegistration struct {
	BondId    string `protobuf:"bytes,1,opt,name=bond_id,json=bondId,proto3" json:"bond_id,omitempty" json:"bondId" yaml:"bondId"`
	LaconicId string `protobuf:"bytes,2,opt,name=laconic_id,json=laconicId,proto3" json:"laconic_id,omitempty" json:"laconicId" yaml:"laconicId"`
	X500      *X500  `protobuf:"bytes,3,opt,name=x500,proto3" json:"x500,omitempty" json:"x500" yaml:"x500"`
	Type      string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty" json:"type" yaml:"type"`
	Version   string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty" json:"version" yaml:"version"`
}

func (m *ServiceProviderRegistration) Reset()         { *m = ServiceProviderRegistration{} }
func (m *ServiceProviderRegistration) String() string { return proto.CompactTextString(m) }
func (*ServiceProviderRegistration) ProtoMessage()    {}
func (*ServiceProviderRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{0}
}
func (m *ServiceProviderRegistration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceProviderRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceProviderRegistration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceProviderRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceProviderRegistration.Merge(m, src)
}
func (m *ServiceProviderRegistration) XXX_Size() int {
	return m.Size()
}
func (m *ServiceProviderRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceProviderRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceProviderRegistration proto.InternalMessageInfo

func (m *ServiceProviderRegistration) GetBondId() string {
	if m != nil {
		return m.BondId
	}
	return ""
}

func (m *ServiceProviderRegistration) GetLaconicId() string {
	if m != nil {
		return m.LaconicId
	}
	return ""
}

func (m *ServiceProviderRegistration) GetX500() *X500 {
	if m != nil {
		return m.X500
	}
	return nil
}

func (m *ServiceProviderRegistration) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ServiceProviderRegistration) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type X500 struct {
	CommonName       string `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty" json:"commonName" yaml:"commonName"`
	OrganizationUnit string `protobuf:"bytes,2,opt,name=organization_unit,json=organizationUnit,proto3" json:"organization_unit,omitempty" json:"organizationUnit" yaml:"organizationUnit"`
	OrganizationName string `protobuf:"bytes,3,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty" json:"organizationName" yaml:"organizationName"`
	LocalityName     string `protobuf:"bytes,4,opt,name=locality_name,json=localityName,proto3" json:"locality_name,omitempty" json:"localityName" yaml:"localityName"`
	StateName        string `protobuf:"bytes,5,opt,name=state_name,json=stateName,proto3" json:"state_name,omitempty" json:"stateName" yaml:"stateName"`
	Country          string `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty" json:"country" yaml:"country"`
}

func (m *X500) Reset()         { *m = X500{} }
func (m *X500) String() string { return proto.CompactTextString(m) }
func (*X500) ProtoMessage()    {}
func (*X500) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{1}
}
func (m *X500) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *X500) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_X500.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *X500) XXX_Merge(src proto.Message) {
	xxx_messageInfo_X500.Merge(m, src)
}
func (m *X500) XXX_Size() int {
	return m.Size()
}
func (m *X500) XXX_DiscardUnknown() {
	xxx_messageInfo_X500.DiscardUnknown(m)
}

var xxx_messageInfo_X500 proto.InternalMessageInfo

func (m *X500) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *X500) GetOrganizationUnit() string {
	if m != nil {
		return m.OrganizationUnit
	}
	return ""
}

func (m *X500) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *X500) GetLocalityName() string {
	if m != nil {
		return m.LocalityName
	}
	return ""
}

func (m *X500) GetStateName() string {
	if m != nil {
		return m.StateName
	}
	return ""
}

func (m *X500) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

type WebsiteRegistrationRecord struct {
	Url                       string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty" json:"url" yaml:"url"`
	RepoRegistrationRecordCid string `protobuf:"bytes,2,opt,name=repo_registration_record_cid,json=repoRegistrationRecordCid,proto3" json:"repo_registration_record_cid,omitempty" json:"repoRegistrationRecordCID" yaml:"repoRegistrationRecordCID"`
	BuildArtifactCid          string `protobuf:"bytes,3,opt,name=build_artifact_cid,json=buildArtifactCid,proto3" json:"build_artifact_cid,omitempty" json:"buildArtifactCID" yaml:"buildArtifactCID"`
	TlsCertCid                string `protobuf:"bytes,4,opt,name=tls_cert_cid,json=tlsCertCid,proto3" json:"tls_cert_cid,omitempty" json:"TLSCertCID" yaml:"TLSCertCID"`
	Type                      string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty" json:"type" yaml:"type"`
	Version                   string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty" json:"version" yaml:"version"`
}

func (m *WebsiteRegistrationRecord) Reset()         { *m = WebsiteRegistrationRecord{} }
func (m *WebsiteRegistrationRecord) String() string { return proto.CompactTextString(m) }
func (*WebsiteRegistrationRecord) ProtoMessage()    {}
func (*WebsiteRegistrationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{2}
}
func (m *WebsiteRegistrationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebsiteRegistrationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebsiteRegistrationRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebsiteRegistrationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebsiteRegistrationRecord.Merge(m, src)
}
func (m *WebsiteRegistrationRecord) XXX_Size() int {
	return m.Size()
}
func (m *WebsiteRegistrationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_WebsiteRegistrationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_WebsiteRegistrationRecord proto.InternalMessageInfo

func (m *WebsiteRegistrationRecord) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *WebsiteRegistrationRecord) GetRepoRegistrationRecordCid() string {
	if m != nil {
		return m.RepoRegistrationRecordCid
	}
	return ""
}

func (m *WebsiteRegistrationRecord) GetBuildArtifactCid() string {
	if m != nil {
		return m.BuildArtifactCid
	}
	return ""
}

func (m *WebsiteRegistrationRecord) GetTlsCertCid() string {
	if m != nil {
		return m.TlsCertCid
	}
	return ""
}

func (m *WebsiteRegistrationRecord) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *WebsiteRegistrationRecord) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type ApplicationRecord struct {
	Type          string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" json:"type" yaml:"type"`
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" json:"name" yaml:"name"`
	Description   string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" json:"description" yaml:"description"`
	Version       string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty" json:"version" yaml:"version"`
	Homepage      string   `protobuf:"bytes,5,opt,name=homepage,proto3" json:"homepage,omitempty" json:"homepage" yaml:"homepage"`
	License       string   `protobuf:"bytes,6,opt,name=license,proto3" json:"license,omitempty" json:"license" yaml:"license"`
	Author        string   `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty" json:"author" yaml:"author"`
	Repository    []string `protobuf:"bytes,8,rep,name=repository,proto3" json:"repository,omitempty" json:"repository" yaml:"repository"`
	RepositoryRef string   `protobuf:"bytes,9,opt,name=repository_ref,json=repositoryRef,proto3" json:"repository_ref,omitempty" json:"repositoryRef" yaml:"repositoryRef"`
	AppVersion    string   `protobuf:"bytes,10,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty" json:"appVersion" yaml:"appVersion"`
	AppType       string   `protobuf:"bytes,11,opt,name=app_type,json=appType,proto3" json:"app_type,omitempty" json:"appType" yaml:"appType"`
	Engines       string   `protobuf:"bytes,12,opt,name=engines,proto3" json:"engines,omitempty" json:"engines" yaml:"engines"`
	Os            []string `protobuf:"bytes,13,rep,name=os,proto3" json:"os,omitempty" json:"os" yaml:"os"`
	Cpu           []string `protobuf:"bytes,14,rep,name=cpu,proto3" json:"cpu,omitempty" json:"cpu" yaml:"cpu"`
	Meta          string   `protobuf:"bytes,20,opt,name=meta,proto3" json:"meta,omitempty" json:"meta" yaml:"meta"`
	Tags          []string `protobuf:"bytes,21,rep,name=tags,proto3" json:"tags,omitempty" json:"tags" yaml:"tags"`
}

func (m *ApplicationRecord) Reset()         { *m = ApplicationRecord{} }
func (m *ApplicationRecord) String() string { return proto.CompactTextString(m) }
func (*ApplicationRecord) ProtoMessage()    {}
func (*ApplicationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{3}
}
func (m *ApplicationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationRecord.Merge(m, src)
}
func (m *ApplicationRecord) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationRecord proto.InternalMessageInfo

func (m *ApplicationRecord) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ApplicationRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationRecord) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ApplicationRecord) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ApplicationRecord) GetHomepage() string {
	if m != nil {
		return m.Homepage
	}
	return ""
}

func (m *ApplicationRecord) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func (m *ApplicationRecord) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *ApplicationRecord) GetRepository() []string {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *ApplicationRecord) GetRepositoryRef() string {
	if m != nil {
		return m.RepositoryRef
	}
	return ""
}

func (m *ApplicationRecord) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *ApplicationRecord) GetAppType() string {
	if m != nil {
		return m.AppType
	}
	return ""
}

func (m *ApplicationRecord) GetEngines() string {
	if m != nil {
		return m.Engines
	}
	return ""
}

func (m *ApplicationRecord) GetOs() []string {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *ApplicationRecord) GetCpu() []string {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *ApplicationRecord) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *ApplicationRecord) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ApplicationArtifact struct {
	Type        string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" json:"type" yaml:"type"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" json:"name" yaml:"name"`
	Description string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" json:"description" yaml:"description"`
	Version     string   `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty" json:"version" yaml:"version"`
	Application string   `protobuf:"bytes,6,opt,name=application,proto3" json:"application,omitempty" json:"application" yaml:"application"`
	ContentType string   `protobuf:"bytes,7,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty" json:"contentType" yaml:"contentType"`
	Os          string   `protobuf:"bytes,8,opt,name=os,proto3" json:"os,omitempty" json:"os" yaml:"os"`
	Cpu         string   `protobuf:"bytes,9,opt,name=cpu,proto3" json:"cpu,omitempty" json:"cpu" yaml:"cpu"`
	Uri         []string `protobuf:"bytes,10,rep,name=uri,proto3" json:"uri,omitempty" json:"uri" yaml:"uri"`
	Meta        string   `protobuf:"bytes,20,opt,name=meta,proto3" json:"meta,omitempty" json:"meta" yaml:"meta"`
	Tags        []string `protobuf:"bytes,21,rep,name=tags,proto3" json:"tags,omitempty" json:"tags" yaml:"tags"`
}

func (m *ApplicationArtifact) Reset()         { *m = ApplicationArtifact{} }
func (m *ApplicationArtifact) String() string { return proto.CompactTextString(m) }
func (*ApplicationArtifact) ProtoMessage()    {}
func (*ApplicationArtifact) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{4}
}
func (m *ApplicationArtifact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationArtifact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationArtifact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationArtifact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationArtifact.Merge(m, src)
}
func (m *ApplicationArtifact) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationArtifact) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationArtifact.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationArtifact proto.InternalMessageInfo

func (m *ApplicationArtifact) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ApplicationArtifact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationArtifact) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ApplicationArtifact) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ApplicationArtifact) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *ApplicationArtifact) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *ApplicationArtifact) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *ApplicationArtifact) GetCpu() string {
	if m != nil {
		return m.Cpu
	}
	return ""
}

func (m *ApplicationArtifact) GetUri() []string {
	if m != nil {
		return m.Uri
	}
	return nil
}

func (m *ApplicationArtifact) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *ApplicationArtifact) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type DnsRecord struct {
	Type         string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" json:"type" yaml:"type"`
	Name         string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" json:"name" yaml:"name"`
	Version      string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty" json:"version" yaml:"version"`
	ResourceType string   `protobuf:"bytes,4,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty" json:"resourceType" yaml:"resourceType"`
	Value        string   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty" json:"value" yaml:"value"`
	Request      string   `protobuf:"bytes,6,opt,name=request,proto3" json:"request,omitempty" json:"request" yaml:"request"`
	Meta         string   `protobuf:"bytes,20,opt,name=meta,proto3" json:"meta,omitempty" json:"meta" yaml:"meta"`
	Tags         []string `protobuf:"bytes,21,rep,name=tags,proto3" json:"tags,omitempty" json:"tags" yaml:"tags"`
}

func (m *DnsRecord) Reset()         { *m = DnsRecord{} }
func (m *DnsRecord) String() string { return proto.CompactTextString(m) }
func (*DnsRecord) ProtoMessage()    {}
func (*DnsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{5}
}
func (m *DnsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DnsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DnsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DnsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DnsRecord.Merge(m, src)
}
func (m *DnsRecord) XXX_Size() int {
	return m.Size()
}
func (m *DnsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DnsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DnsRecord proto.InternalMessageInfo

func (m *DnsRecord) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DnsRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DnsRecord) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *DnsRecord) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *DnsRecord) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *DnsRecord) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

func (m *DnsRecord) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *DnsRecord) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ApplicationDeploymentRequest struct {
	Type        string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" json:"type" yaml:"type"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" json:"name" yaml:"name"`
	Version     string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty" json:"version" yaml:"version"`
	Application string   `protobuf:"bytes,4,opt,name=application,proto3" json:"application,omitempty" json:"application" yaml:"application"`
	Dns         string   `protobuf:"bytes,5,opt,name=dns,proto3" json:"dns,omitempty" json:"dns" yaml:"dns"`
	Config      string   `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty" json:"config" yaml:"config"`
	Deployment  string   `protobuf:"bytes,7,opt,name=deployment,proto3" json:"deployment,omitempty" json:"deployment" yaml:"deployment"`
	Meta        string   `protobuf:"bytes,20,opt,name=meta,proto3" json:"meta,omitempty" json:"meta" yaml:"meta"`
	Tags        []string `protobuf:"bytes,21,rep,name=tags,proto3" json:"tags,omitempty" json:"tags" yaml:"tags"`
}

func (m *ApplicationDeploymentRequest) Reset()         { *m = ApplicationDeploymentRequest{} }
func (m *ApplicationDeploymentRequest) String() string { return proto.CompactTextString(m) }
func (*ApplicationDeploymentRequest) ProtoMessage()    {}
func (*ApplicationDeploymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{6}
}
func (m *ApplicationDeploymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationDeploymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationDeploymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationDeploymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationDeploymentRequest.Merge(m, src)
}
func (m *ApplicationDeploymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationDeploymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationDeploymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationDeploymentRequest proto.InternalMessageInfo

func (m *ApplicationDeploymentRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ApplicationDeploymentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationDeploymentRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ApplicationDeploymentRequest) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *ApplicationDeploymentRequest) GetDns() string {
	if m != nil {
		return m.Dns
	}
	return ""
}

func (m *ApplicationDeploymentRequest) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

func (m *ApplicationDeploymentRequest) GetDeployment() string {
	if m != nil {
		return m.Deployment
	}
	return ""
}

func (m *ApplicationDeploymentRequest) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *ApplicationDeploymentRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ApplicationDeploymentRecord struct {
	Type        string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" json:"type" yaml:"type"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" json:"name" yaml:"name"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" json:"description" yaml:"description"`
	Version     string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty" json:"version" yaml:"version"`
	Application string   `protobuf:"bytes,5,opt,name=application,proto3" json:"application,omitempty" json:"application" yaml:"application"`
	Url         string   `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty" json:"url" yaml:"url"`
	Dns         string   `protobuf:"bytes,7,opt,name=dns,proto3" json:"dns,omitempty" json:"dns" yaml:"dns"`
	Request     string   `protobuf:"bytes,8,opt,name=request,proto3" json:"request,omitempty" json:"request" yaml:"request"`
	Meta        string   `protobuf:"bytes,20,opt,name=meta,proto3" json:"meta,omitempty" json:"meta" yaml:"meta"`
	Tags        []string `protobuf:"bytes,21,rep,name=tags,proto3" json:"tags,omitempty" json:"tags" yaml:"tags"`
}

func (m *ApplicationDeploymentRecord) Reset()         { *m = ApplicationDeploymentRecord{} }
func (m *ApplicationDeploymentRecord) String() string { return proto.CompactTextString(m) }
func (*ApplicationDeploymentRecord) ProtoMessage()    {}
func (*ApplicationDeploymentRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{7}
}
func (m *ApplicationDeploymentRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationDeploymentRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationDeploymentRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationDeploymentRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationDeploymentRecord.Merge(m, src)
}
func (m *ApplicationDeploymentRecord) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationDeploymentRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationDeploymentRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationDeploymentRecord proto.InternalMessageInfo

func (m *ApplicationDeploymentRecord) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ApplicationDeploymentRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationDeploymentRecord) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ApplicationDeploymentRecord) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ApplicationDeploymentRecord) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *ApplicationDeploymentRecord) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ApplicationDeploymentRecord) GetDns() string {
	if m != nil {
		return m.Dns
	}
	return ""
}

func (m *ApplicationDeploymentRecord) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

func (m *ApplicationDeploymentRecord) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *ApplicationDeploymentRecord) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type GeneralRecord struct {
	Type        string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" json:"type" yaml:"type"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" json:"name" yaml:"name"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" json:"description" yaml:"description"`
	Version     string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty" json:"version" yaml:"version"`
	Category    string   `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty" json:"category" yaml:"category"`
	Value       string   `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty" json:"value" yaml:"value"`
	Meta        string   `protobuf:"bytes,20,opt,name=meta,proto3" json:"meta,omitempty" json:"meta" yaml:"meta"`
	Tags        []string `protobuf:"bytes,21,rep,name=tags,proto3" json:"tags,omitempty" json:"tags" yaml:"tags"`
}

func (m *GeneralRecord) Reset()         { *m = GeneralRecord{} }
func (m *GeneralRecord) String() string { return proto.CompactTextString(m) }
func (*GeneralRecord) ProtoMessage()    {}
func (*GeneralRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{8}
}
func (m *GeneralRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeneralRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeneralRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeneralRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeneralRecord.Merge(m, src)
}
func (m *GeneralRecord) XXX_Size() int {
	return m.Size()
}
func (m *GeneralRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_GeneralRecord.DiscardUnknown(m)
}

var xxx_messageInfo_GeneralRecord proto.InternalMessageInfo

func (m *GeneralRecord) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GeneralRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GeneralRecord) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GeneralRecord) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GeneralRecord) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *GeneralRecord) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *GeneralRecord) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *GeneralRecord) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceProviderRegistration)(nil), "vulcanize.registry.v1beta1.ServiceProviderRegistration")
	proto.RegisterType((*X500)(nil), "vulcanize.registry.v1beta1.X500")
	proto.RegisterType((*WebsiteRegistrationRecord)(nil), "vulcanize.registry.v1beta1.WebsiteRegistrationRecord")
	proto.RegisterType((*ApplicationRecord)(nil), "vulcanize.registry.v1beta1.ApplicationRecord")
	proto.RegisterType((*ApplicationArtifact)(nil), "vulcanize.registry.v1beta1.ApplicationArtifact")
	proto.RegisterType((*DnsRecord)(nil), "vulcanize.registry.v1beta1.DnsRecord")
	proto.RegisterType((*ApplicationDeploymentRequest)(nil), "vulcanize.registry.v1beta1.ApplicationDeploymentRequest")
	proto.RegisterType((*ApplicationDeploymentRecord)(nil), "vulcanize.registry.v1beta1.ApplicationDeploymentRecord")
	proto.RegisterType((*GeneralRecord)(nil), "vulcanize.registry.v1beta1.GeneralRecord")
}

func init() {
	proto.RegisterFile("vulcanize/registry/v1beta1/attributes.proto", fileDescriptor_f305abc771332c96)
}

var fileDescriptor_f305abc771332c96 = []byte{
	// 1320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0xcf, 0x6f, 0xdc, 0xc4,
	0x17, 0xef, 0x66, 0x7f, 0x65, 0x27, 0x49, 0xd5, 0xba, 0xad, 0xea, 0x34, 0xed, 0x3a, 0xdd, 0xaa,
	0x6a, 0xab, 0x7c, 0xbb, 0x9b, 0x7e, 0xab, 0x0a, 0x04, 0x48, 0xa8, 0x69, 0xa0, 0x44, 0xad, 0x50,
	0x98, 0x86, 0x1f, 0xe2, 0xb2, 0xcc, 0xda, 0x93, 0xcd, 0x20, 0xaf, 0xc7, 0x8c, 0xc7, 0xab, 0x2e,
	0x37, 0x2e, 0x9c, 0xb9, 0xf3, 0x0f, 0x71, 0x23, 0x82, 0x0b, 0x27, 0x0b, 0x25, 0x27, 0x0e, 0x5c,
	0xfc, 0x17, 0xa0, 0x19, 0xcf, 0xd8, 0xb3, 0x5e, 0x82, 0x12, 0x15, 0x56, 0x95, 0x7a, 0x9b, 0xf7,
	0xe3, 0xf3, 0x66, 0x3c, 0xef, 0xf3, 0xde, 0xb3, 0x0d, 0x36, 0xc6, 0xb1, 0xef, 0xa2, 0x80, 0x7c,
	0x8b, 0x7b, 0x0c, 0x0f, 0x49, 0xc4, 0xd9, 0xa4, 0x37, 0x7e, 0x30, 0xc0, 0x1c, 0x3d, 0xe8, 0x21,
	0xce, 0x19, 0x19, 0xc4, 0x1c, 0x47, 0xdd, 0x90, 0x51, 0x4e, 0xad, 0x6b, 0xb9, 0x73, 0x57, 0x3b,
	0x77, 0x95, 0xf3, 0xb5, 0xcb, 0x43, 0x3a, 0xa4, 0xd2, 0xad, 0x27, 0x56, 0x19, 0xa2, 0x93, 0x2c,
	0x80, 0xb5, 0x17, 0x98, 0x8d, 0x89, 0x8b, 0x77, 0x19, 0x1d, 0x13, 0x0f, 0x33, 0x98, 0x21, 0x11,
	0x27, 0x34, 0xb0, 0xde, 0x06, 0xcd, 0x01, 0x0d, 0xbc, 0x3e, 0xf1, 0xec, 0xca, 0x7a, 0xe5, 0x6e,
	0x6b, 0xcb, 0x49, 0x13, 0x67, 0xed, 0xeb, 0x88, 0x06, 0xef, 0x74, 0x84, 0x61, 0xc7, 0xeb, 0xac,
	0x4f, 0xd0, 0xc8, 0xcf, 0x25, 0xd8, 0xc8, 0x16, 0xd6, 0x36, 0x00, 0x3e, 0x72, 0x69, 0x40, 0x5c,
	0x01, 0x5e, 0x90, 0xe0, 0xdb, 0x69, 0xe2, 0xdc, 0xcc, 0xc0, 0xca, 0x56, 0xe0, 0x0b, 0x05, 0x6c,
	0xe5, 0x6b, 0xeb, 0x13, 0x50, 0x7b, 0xf9, 0x68, 0x73, 0xd3, 0xae, 0xae, 0x57, 0xee, 0x2e, 0xfd,
	0x7f, 0xbd, 0x7b, 0xf2, 0x03, 0x76, 0xbf, 0x78, 0xb4, 0xb9, 0xb9, 0xb5, 0x96, 0x26, 0xce, 0xd5,
	0x6c, 0x07, 0x81, 0xd3, 0xc1, 0xe5, 0x1a, 0xca, 0x50, 0x56, 0x0f, 0xd4, 0xf8, 0x24, 0xc4, 0x76,
	0x4d, 0x1e, 0xc9, 0x00, 0x08, 0xad, 0x06, 0xc8, 0x35, 0x94, 0x8e, 0xd6, 0xbb, 0xa0, 0x39, 0xc6,
	0x2c, 0x22, 0x34, 0xb0, 0x1b, 0x12, 0x73, 0x33, 0x4d, 0x9c, 0x1b, 0x19, 0x46, 0x19, 0x34, 0x4c,
	0x8b, 0x50, 0x23, 0x3a, 0x7f, 0x54, 0x41, 0x4d, 0x9c, 0xcc, 0xfa, 0x08, 0x2c, 0xb9, 0x74, 0x34,
	0xa2, 0x41, 0x3f, 0x40, 0x23, 0xac, 0x6e, 0xf3, 0x4e, 0x9a, 0x38, 0xb7, 0xb2, 0x48, 0x99, 0xf1,
	0x63, 0x34, 0xca, 0xcf, 0x60, 0x68, 0x20, 0x28, 0x04, 0xeb, 0x2b, 0x70, 0x91, 0xb2, 0xa1, 0xb8,
	0x05, 0x99, 0xa3, 0x7e, 0x1c, 0x10, 0xae, 0x2e, 0xf8, 0x61, 0x9a, 0x38, 0xbd, 0x2c, 0x9e, 0xe9,
	0xf2, 0x69, 0x40, 0xb8, 0x8e, 0x3a, 0xa3, 0x87, 0x17, 0xca, 0xaa, 0x99, 0x1d, 0xe4, 0x89, 0xab,
	0xff, 0xb4, 0x83, 0x79, 0xee, 0x19, 0xfd, 0xf4, 0x0e, 0xf2, 0x19, 0x76, 0xc1, 0x8a, 0x4f, 0x5d,
	0xe4, 0x13, 0x3e, 0xc9, 0xa2, 0x67, 0xd9, 0xd8, 0x48, 0x13, 0xe7, 0x8e, 0x22, 0x88, 0x32, 0x9b,
	0x91, 0xa7, 0x74, 0x70, 0xd9, 0x14, 0x05, 0xdf, 0x22, 0x8e, 0x38, 0xce, 0xc2, 0xd5, 0xcb, 0x7c,
	0x93, 0x36, 0x33, 0x56, 0xa1, 0x80, 0xad, 0x7c, 0x2d, 0x72, 0xed, 0xd2, 0x38, 0xe0, 0x6c, 0x32,
	0x9b, 0x6b, 0x65, 0x28, 0xd2, 0x93, 0x89, 0x50, 0x23, 0x3a, 0x7f, 0x56, 0xc1, 0xea, 0xe7, 0x78,
	0x10, 0x11, 0x8e, 0xcd, 0x22, 0x82, 0xd8, 0xa5, 0xcc, 0xb3, 0x36, 0x40, 0x35, 0x66, 0xbe, 0x4a,
	0xfc, 0x6a, 0x9a, 0x38, 0x57, 0xb2, 0xb0, 0x31, 0xf3, 0x75, 0x48, 0xb1, 0x84, 0xc2, 0xcb, 0xfa,
	0xbe, 0x02, 0xae, 0x33, 0x1c, 0xd2, 0x3e, 0x33, 0x02, 0xf5, 0x99, 0x8c, 0xd4, 0x77, 0xf3, 0x82,
	0xfa, 0x20, 0x4d, 0x9c, 0xc7, 0x59, 0x18, 0xe1, 0x3d, 0xbb, 0xeb, 0x93, 0x9d, 0x6d, 0x1d, 0xfc,
	0x64, 0x07, 0xb8, 0x7a, 0x82, 0x8d, 0x78, 0x16, 0x02, 0xd6, 0x20, 0x26, 0xbe, 0xd7, 0x47, 0x8c,
	0x93, 0x7d, 0xe4, 0x72, 0xb9, 0xfb, 0x0c, 0x17, 0xa4, 0xcf, 0x63, 0xe5, 0x62, 0x6c, 0x3a, 0xa3,
	0x87, 0x17, 0xa6, 0x55, 0xc4, 0xb3, 0x76, 0xc0, 0x32, 0xf7, 0xa3, 0xbe, 0x8b, 0x59, 0x16, 0xbc,
	0x56, 0x2e, 0x8d, 0xbd, 0xe7, 0x2f, 0x9e, 0x60, 0x66, 0x86, 0x35, 0x34, 0x10, 0x70, 0x3f, 0x92,
	0x02, 0xf1, 0xf2, 0xda, 0xae, 0xcf, 0xa5, 0xb6, 0x7f, 0x69, 0x82, 0x8b, 0x8f, 0xc3, 0xd0, 0x27,
	0xae, 0x99, 0x67, 0x7d, 0x86, 0xca, 0x69, 0xcf, 0xd0, 0x03, 0x35, 0xc9, 0xd9, 0x85, 0x32, 0x20,
	0x30, 0xe8, 0x2a, 0xd7, 0x50, 0x3a, 0x5a, 0xcf, 0xc0, 0x92, 0x87, 0x23, 0x97, 0x91, 0x50, 0x6c,
	0xab, 0x92, 0x71, 0x2f, 0x4d, 0x9c, 0xdb, 0x19, 0xce, 0x30, 0x6a, 0xb8, 0xa9, 0x82, 0x26, 0xda,
	0xbc, 0x81, 0xda, 0x59, 0x6f, 0xc0, 0x7a, 0x1f, 0x2c, 0x1e, 0xd0, 0x11, 0x0e, 0xd1, 0x50, 0xdf,
	0xf9, 0xad, 0x34, 0x71, 0x9c, 0x0c, 0xad, 0x2d, 0x1a, 0x9e, 0xcb, 0x30, 0x07, 0x89, 0xdd, 0x7d,
	0xe2, 0xe2, 0x20, 0xc2, 0xb3, 0xf7, 0xaf, 0x0c, 0x79, 0xf1, 0x2b, 0x11, 0x6a, 0x84, 0xf5, 0x16,
	0x68, 0xa0, 0x98, 0x1f, 0x50, 0x66, 0x37, 0xcb, 0xb3, 0x29, 0xd3, 0x6b, 0xa8, 0x92, 0xa0, 0x72,
	0xb7, 0x9e, 0x02, 0x20, 0x18, 0x1f, 0x11, 0x4e, 0xd9, 0xc4, 0x5e, 0x5c, 0xaf, 0x4e, 0xf3, 0xad,
	0xb0, 0x99, 0xb5, 0xa3, 0x34, 0xd0, 0x80, 0x5a, 0x7b, 0xe0, 0x7c, 0x21, 0xf5, 0x19, 0xde, 0xb7,
	0x5b, 0xf2, 0x24, 0xf7, 0xd3, 0xc4, 0xb9, 0x57, 0x0e, 0x06, 0xf1, 0xfe, 0x6c, 0x3c, 0xa1, 0x84,
	0x2b, 0x53, 0xb2, 0x18, 0x15, 0x28, 0x0c, 0xfb, 0x3a, 0x2d, 0xa0, 0x5c, 0x0f, 0x28, 0x0c, 0x3f,
	0x9b, 0xce, 0x8c, 0xa1, 0x81, 0xa0, 0x10, 0xac, 0xf7, 0xc0, 0xa2, 0x88, 0x24, 0xf9, 0xb8, 0x54,
	0xbe, 0x5f, 0x14, 0x86, 0x7b, 0x06, 0x25, 0xb5, 0x08, 0x9b, 0x6a, 0x25, 0x92, 0x83, 0x83, 0x21,
	0x09, 0x70, 0x64, 0x2f, 0x97, 0xc1, 0xca, 0xa0, 0xc1, 0x5a, 0x84, 0x1a, 0x61, 0xdd, 0x01, 0x0b,
	0x34, 0xb2, 0x57, 0xe4, 0xdd, 0x5e, 0x4d, 0x13, 0xe7, 0x92, 0x1a, 0x1a, 0x39, 0x84, 0x46, 0x1d,
	0xb8, 0x40, 0x23, 0xd1, 0x17, 0xdd, 0x30, 0xb6, 0xcf, 0x4b, 0x4f, 0xa3, 0x2f, 0xba, 0x61, 0x9c,
	0xb7, 0xda, 0x30, 0xee, 0x40, 0xe1, 0x25, 0x6a, 0x65, 0x84, 0x39, 0xb2, 0x2f, 0x97, 0x6b, 0x45,
	0x68, 0xb5, 0xbb, 0x5c, 0x43, 0xe9, 0x28, 0xab, 0x11, 0x0d, 0x23, 0xfb, 0x8a, 0x0c, 0x6f, 0x56,
	0x23, 0x1a, 0xe6, 0x47, 0x91, 0x6b, 0x28, 0x1d, 0x3b, 0xdf, 0xd5, 0xc1, 0x25, 0xa3, 0xa8, 0x75,
	0xa3, 0x9a, 0x7f, 0x59, 0xd7, 0xfe, 0xad, 0xb2, 0xae, 0x9f, 0xb9, 0xac, 0x9f, 0x49, 0x02, 0xea,
	0x2b, 0x50, 0x95, 0x69, 0x9c, 0xc4, 0x30, 0x1a, 0xec, 0xc9, 0x55, 0xd0, 0x44, 0x5b, 0xcf, 0xc1,
	0xb2, 0x4b, 0x03, 0x8e, 0x03, 0x9e, 0xf1, 0xb0, 0x59, 0x8e, 0xa6, 0xac, 0x26, 0x17, 0x4d, 0x15,
	0x5c, 0x32, 0x24, 0x45, 0xab, 0x45, 0x19, 0xe3, 0x34, 0xb4, 0x6a, 0x95, 0xc7, 0xed, 0xdf, 0xd2,
	0x4a, 0xce, 0x66, 0x62, 0x83, 0x32, 0x07, 0x63, 0x46, 0x8a, 0xd9, 0x4c, 0xe4, 0x6c, 0x26, 0x73,
	0xe0, 0xe0, 0x61, 0x15, 0xb4, 0xb6, 0x83, 0x68, 0x6e, 0x03, 0xc5, 0x20, 0x4b, 0xf5, 0xcc, 0x64,
	0xd9, 0x05, 0x2b, 0x0c, 0x47, 0x34, 0x66, 0x2e, 0xee, 0x1b, 0x2f, 0xd6, 0xc6, 0xab, 0x9c, 0x36,
	0x9b, 0x19, 0x9e, 0xd2, 0xc1, 0x65, 0x53, 0xb4, 0x1e, 0x82, 0xfa, 0x18, 0xf9, 0xb1, 0x1e, 0x29,
	0x37, 0xd2, 0xc4, 0x59, 0x55, 0x87, 0x11, 0xea, 0xfc, 0x28, 0x52, 0x80, 0x99, 0xaf, 0x78, 0x06,
	0x86, 0xbf, 0x89, 0x71, 0xc4, 0x67, 0x27, 0x89, 0x32, 0x14, 0x7b, 0x67, 0x22, 0xd4, 0x88, 0x39,
	0xa4, 0xf4, 0xc7, 0x1a, 0xb8, 0x6e, 0xb4, 0x95, 0x6d, 0x1c, 0xfa, 0x74, 0x32, 0xc2, 0x01, 0x87,
	0xc5, 0x11, 0x5e, 0xe7, 0x2c, 0x97, 0x5a, 0x42, 0xed, 0x95, 0x5a, 0xc2, 0x06, 0xa8, 0x7a, 0x41,
	0xa4, 0xd2, 0x6b, 0x94, 0x9b, 0x17, 0xe4, 0x77, 0x27, 0x96, 0x50, 0x78, 0x89, 0x29, 0xef, 0xd2,
	0x60, 0x9f, 0x0c, 0x55, 0x5e, 0x8d, 0x29, 0x9f, 0xe9, 0x8d, 0xa6, 0x21, 0x24, 0xa8, 0xdc, 0xc5,
	0x94, 0xf7, 0xf2, 0x6b, 0x56, 0x6d, 0xc7, 0x98, 0xa2, 0x85, 0xad, 0xe8, 0xa6, 0xb9, 0x06, 0x1a,
	0xd0, 0x39, 0xb0, 0xe3, 0xe7, 0x1a, 0x58, 0x3b, 0x81, 0x1d, 0x6f, 0xdc, 0x3b, 0x65, 0x89, 0x69,
	0xf5, 0x57, 0x65, 0x9a, 0xf8, 0xe8, 0x6a, 0x9c, 0xea, 0xa3, 0x4b, 0xd1, 0xb2, 0x79, 0x2a, 0x5a,
	0x1a, 0xfd, 0x66, 0xf1, 0x35, 0xec, 0x37, 0xbf, 0x56, 0xc1, 0xca, 0x53, 0x1c, 0x60, 0x86, 0xfc,
	0x37, 0xf3, 0xbb, 0xc4, 0x45, 0x1c, 0x0f, 0xc5, 0xeb, 0xfd, 0xcc, 0x77, 0x89, 0xb6, 0xe4, 0x7d,
	0x43, 0xcb, 0x30, 0x07, 0x15, 0x23, 0xa8, 0x71, 0x86, 0x11, 0xf4, 0x9f, 0x67, 0x75, 0xeb, 0xc3,
	0x9f, 0x8e, 0xda, 0x95, 0xc3, 0xa3, 0x76, 0xe5, 0xf7, 0xa3, 0x76, 0xe5, 0x87, 0xe3, 0xf6, 0xb9,
	0xc3, 0xe3, 0xf6, 0xb9, 0xdf, 0x8e, 0xdb, 0xe7, 0xbe, 0xfc, 0xdf, 0x90, 0xf0, 0x83, 0x78, 0xd0,
	0x75, 0xe9, 0xa8, 0xe7, 0x62, 0xe6, 0xde, 0x27, 0xb4, 0xa7, 0x7e, 0xa3, 0x79, 0xbd, 0x97, 0xc5,
	0xbf, 0x43, 0x91, 0xd9, 0x68, 0xd0, 0x90, 0x7f, 0xff, 0x1e, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff,
	0xf0, 0xef, 0xc9, 0x05, 0x5e, 0x14, 0x00, 0x00,
}

func (m *ServiceProviderRegistration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceProviderRegistration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceProviderRegistration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if m.X500 != nil {
		{
			size, err := m.X500.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LaconicId) > 0 {
		i -= len(m.LaconicId)
		copy(dAtA[i:], m.LaconicId)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.LaconicId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BondId) > 0 {
		i -= len(m.BondId)
		copy(dAtA[i:], m.BondId)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.BondId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *X500) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *X500) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *X500) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StateName) > 0 {
		i -= len(m.StateName)
		copy(dAtA[i:], m.StateName)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.StateName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LocalityName) > 0 {
		i -= len(m.LocalityName)
		copy(dAtA[i:], m.LocalityName)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.LocalityName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrganizationName) > 0 {
		i -= len(m.OrganizationName)
		copy(dAtA[i:], m.OrganizationName)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.OrganizationName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrganizationUnit) > 0 {
		i -= len(m.OrganizationUnit)
		copy(dAtA[i:], m.OrganizationUnit)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.OrganizationUnit)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CommonName) > 0 {
		i -= len(m.CommonName)
		copy(dAtA[i:], m.CommonName)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.CommonName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WebsiteRegistrationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebsiteRegistrationRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebsiteRegistrationRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TlsCertCid) > 0 {
		i -= len(m.TlsCertCid)
		copy(dAtA[i:], m.TlsCertCid)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.TlsCertCid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BuildArtifactCid) > 0 {
		i -= len(m.BuildArtifactCid)
		copy(dAtA[i:], m.BuildArtifactCid)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.BuildArtifactCid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RepoRegistrationRecordCid) > 0 {
		i -= len(m.RepoRegistrationRecordCid)
		copy(dAtA[i:], m.RepoRegistrationRecordCid)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.RepoRegistrationRecordCid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintAttributes(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Cpu) > 0 {
		for iNdEx := len(m.Cpu) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cpu[iNdEx])
			copy(dAtA[i:], m.Cpu[iNdEx])
			i = encodeVarintAttributes(dAtA, i, uint64(len(m.Cpu[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.Os) > 0 {
		for iNdEx := len(m.Os) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Os[iNdEx])
			copy(dAtA[i:], m.Os[iNdEx])
			i = encodeVarintAttributes(dAtA, i, uint64(len(m.Os[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.Engines) > 0 {
		i -= len(m.Engines)
		copy(dAtA[i:], m.Engines)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Engines)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.AppType) > 0 {
		i -= len(m.AppType)
		copy(dAtA[i:], m.AppType)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.AppType)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.AppVersion) > 0 {
		i -= len(m.AppVersion)
		copy(dAtA[i:], m.AppVersion)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.AppVersion)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.RepositoryRef) > 0 {
		i -= len(m.RepositoryRef)
		copy(dAtA[i:], m.RepositoryRef)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.RepositoryRef)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Repository) > 0 {
		for iNdEx := len(m.Repository) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Repository[iNdEx])
			copy(dAtA[i:], m.Repository[iNdEx])
			i = encodeVarintAttributes(dAtA, i, uint64(len(m.Repository[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.License) > 0 {
		i -= len(m.License)
		copy(dAtA[i:], m.License)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.License)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Homepage) > 0 {
		i -= len(m.Homepage)
		copy(dAtA[i:], m.Homepage)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Homepage)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationArtifact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationArtifact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationArtifact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintAttributes(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Uri) > 0 {
		for iNdEx := len(m.Uri) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Uri[iNdEx])
			copy(dAtA[i:], m.Uri[iNdEx])
			i = encodeVarintAttributes(dAtA, i, uint64(len(m.Uri[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Cpu) > 0 {
		i -= len(m.Cpu)
		copy(dAtA[i:], m.Cpu)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Cpu)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Os) > 0 {
		i -= len(m.Os)
		copy(dAtA[i:], m.Os)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Os)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Application) > 0 {
		i -= len(m.Application)
		copy(dAtA[i:], m.Application)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Application)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DnsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DnsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DnsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintAttributes(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Request) > 0 {
		i -= len(m.Request)
		copy(dAtA[i:], m.Request)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Request)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ResourceType) > 0 {
		i -= len(m.ResourceType)
		copy(dAtA[i:], m.ResourceType)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.ResourceType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationDeploymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationDeploymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationDeploymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintAttributes(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Deployment) > 0 {
		i -= len(m.Deployment)
		copy(dAtA[i:], m.Deployment)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Deployment)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Config) > 0 {
		i -= len(m.Config)
		copy(dAtA[i:], m.Config)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Config)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Dns) > 0 {
		i -= len(m.Dns)
		copy(dAtA[i:], m.Dns)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Dns)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Application) > 0 {
		i -= len(m.Application)
		copy(dAtA[i:], m.Application)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Application)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationDeploymentRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationDeploymentRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationDeploymentRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintAttributes(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Request) > 0 {
		i -= len(m.Request)
		copy(dAtA[i:], m.Request)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Request)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Dns) > 0 {
		i -= len(m.Dns)
		copy(dAtA[i:], m.Dns)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Dns)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Application) > 0 {
		i -= len(m.Application)
		copy(dAtA[i:], m.Application)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Application)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GeneralRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeneralRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeneralRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintAttributes(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAttributes(dAtA []byte, offset int, v uint64) int {
	offset -= sovAttributes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServiceProviderRegistration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondId)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.LaconicId)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	if m.X500 != nil {
		l = m.X500.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func (m *X500) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommonName)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.OrganizationUnit)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.OrganizationName)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.LocalityName)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.StateName)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func (m *WebsiteRegistrationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.RepoRegistrationRecordCid)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.BuildArtifactCid)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.TlsCertCid)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func (m *ApplicationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Homepage)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.License)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	if len(m.Repository) > 0 {
		for _, s := range m.Repository {
			l = len(s)
			n += 1 + l + sovAttributes(uint64(l))
		}
	}
	l = len(m.RepositoryRef)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.AppType)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Engines)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	if len(m.Os) > 0 {
		for _, s := range m.Os {
			l = len(s)
			n += 1 + l + sovAttributes(uint64(l))
		}
	}
	if len(m.Cpu) > 0 {
		for _, s := range m.Cpu {
			l = len(s)
			n += 1 + l + sovAttributes(uint64(l))
		}
	}
	l = len(m.Meta)
	if l > 0 {
		n += 2 + l + sovAttributes(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 2 + l + sovAttributes(uint64(l))
		}
	}
	return n
}

func (m *ApplicationArtifact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Application)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Os)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Cpu)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	if len(m.Uri) > 0 {
		for _, s := range m.Uri {
			l = len(s)
			n += 1 + l + sovAttributes(uint64(l))
		}
	}
	l = len(m.Meta)
	if l > 0 {
		n += 2 + l + sovAttributes(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 2 + l + sovAttributes(uint64(l))
		}
	}
	return n
}

func (m *DnsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.ResourceType)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 2 + l + sovAttributes(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 2 + l + sovAttributes(uint64(l))
		}
	}
	return n
}

func (m *ApplicationDeploymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Application)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Dns)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Deployment)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 2 + l + sovAttributes(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 2 + l + sovAttributes(uint64(l))
		}
	}
	return n
}

func (m *ApplicationDeploymentRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Application)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Dns)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 2 + l + sovAttributes(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 2 + l + sovAttributes(uint64(l))
		}
	}
	return n
}

func (m *GeneralRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 2 + l + sovAttributes(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 2 + l + sovAttributes(uint64(l))
		}
	}
	return n
}

func sovAttributes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAttributes(x uint64) (n int) {
	return sovAttributes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServiceProviderRegistration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceProviderRegistration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceProviderRegistration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaconicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LaconicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field X500", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.X500 == nil {
				m.X500 = &X500{}
			}
			if err := m.X500.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *X500) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: X500: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: X500: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommonName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationUnit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebsiteRegistrationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebsiteRegistrationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebsiteRegistrationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoRegistrationRecordCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepoRegistrationRecordCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildArtifactCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildArtifactCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCertCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsCertCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Homepage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Homepage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repository", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repository = append(m.Repository, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepositoryRef = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Engines", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Engines = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = append(m.Os, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpu = append(m.Cpu, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationArtifact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationArtifact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationArtifact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Application = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = append(m.Uri, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DnsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DnsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DnsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationDeploymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationDeploymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationDeploymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Application = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationDeploymentRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationDeploymentRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationDeploymentRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Application = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeneralRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeneralRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeneralRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAttributes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAttributes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAttributes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAttributes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAttributes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAttributes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAttributes = fmt.Errorf("proto: unexpected end of group")
)
