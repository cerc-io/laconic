// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vulcanize/registry/v1beta1/attributes.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HashReference struct {
	Ref string `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (m *HashReference) Reset()         { *m = HashReference{} }
func (m *HashReference) String() string { return proto.CompactTextString(m) }
func (*HashReference) ProtoMessage()    {}
func (*HashReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{0}
}
func (m *HashReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HashReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HashReference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HashReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashReference.Merge(m, src)
}
func (m *HashReference) XXX_Size() int {
	return m.Size()
}
func (m *HashReference) XXX_DiscardUnknown() {
	xxx_messageInfo_HashReference.DiscardUnknown(m)
}

var xxx_messageInfo_HashReference proto.InternalMessageInfo

func (m *HashReference) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

type ServiceProviderRecord struct {
	BondId    string                      `protobuf:"bytes,1,opt,name=bond_id,json=bondId,proto3" json:"bond_id,omitempty" json:"bondId" yaml:"bondId"`
	LaconicId string                      `protobuf:"bytes,2,opt,name=laconic_id,json=laconicId,proto3" json:"laconic_id,omitempty" json:"laconicId" yaml:"laconicId"`
	X500      *ServiceProviderRecord_X500 `protobuf:"bytes,3,opt,name=x500,proto3" json:"x500,omitempty" json:"x500" yaml:"x500"`
	Type      string                      `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty" json:"type" yaml:"type"`
	Version   string                      `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty" json:"version" yaml:"version"`
}

func (m *ServiceProviderRecord) Reset()         { *m = ServiceProviderRecord{} }
func (m *ServiceProviderRecord) String() string { return proto.CompactTextString(m) }
func (*ServiceProviderRecord) ProtoMessage()    {}
func (*ServiceProviderRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{1}
}
func (m *ServiceProviderRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceProviderRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceProviderRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceProviderRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceProviderRecord.Merge(m, src)
}
func (m *ServiceProviderRecord) XXX_Size() int {
	return m.Size()
}
func (m *ServiceProviderRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceProviderRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceProviderRecord proto.InternalMessageInfo

func (m *ServiceProviderRecord) GetBondId() string {
	if m != nil {
		return m.BondId
	}
	return ""
}

func (m *ServiceProviderRecord) GetLaconicId() string {
	if m != nil {
		return m.LaconicId
	}
	return ""
}

func (m *ServiceProviderRecord) GetX500() *ServiceProviderRecord_X500 {
	if m != nil {
		return m.X500
	}
	return nil
}

func (m *ServiceProviderRecord) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ServiceProviderRecord) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type ServiceProviderRecord_X500 struct {
	CommonName       string `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty" json:"commonName" yaml:"commonName"`
	OrganizationUnit string `protobuf:"bytes,2,opt,name=organization_unit,json=organizationUnit,proto3" json:"organization_unit,omitempty" json:"organizationUnit" yaml:"organizationUnit"`
	OrganizationName string `protobuf:"bytes,3,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty" json:"organizationName" yaml:"organizationName"`
	LocalityName     string `protobuf:"bytes,4,opt,name=locality_name,json=localityName,proto3" json:"locality_name,omitempty" json:"localityName" yaml:"localityName"`
	StateName        string `protobuf:"bytes,5,opt,name=state_name,json=stateName,proto3" json:"state_name,omitempty" json:"stateName" yaml:"stateName"`
	Country          string `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty" json:"country" yaml:"country"`
}

func (m *ServiceProviderRecord_X500) Reset()         { *m = ServiceProviderRecord_X500{} }
func (m *ServiceProviderRecord_X500) String() string { return proto.CompactTextString(m) }
func (*ServiceProviderRecord_X500) ProtoMessage()    {}
func (*ServiceProviderRecord_X500) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{1, 0}
}
func (m *ServiceProviderRecord_X500) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceProviderRecord_X500) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceProviderRecord_X500.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceProviderRecord_X500) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceProviderRecord_X500.Merge(m, src)
}
func (m *ServiceProviderRecord_X500) XXX_Size() int {
	return m.Size()
}
func (m *ServiceProviderRecord_X500) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceProviderRecord_X500.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceProviderRecord_X500 proto.InternalMessageInfo

func (m *ServiceProviderRecord_X500) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *ServiceProviderRecord_X500) GetOrganizationUnit() string {
	if m != nil {
		return m.OrganizationUnit
	}
	return ""
}

func (m *ServiceProviderRecord_X500) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *ServiceProviderRecord_X500) GetLocalityName() string {
	if m != nil {
		return m.LocalityName
	}
	return ""
}

func (m *ServiceProviderRecord_X500) GetStateName() string {
	if m != nil {
		return m.StateName
	}
	return ""
}

func (m *ServiceProviderRecord_X500) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

type WebsiteRegistrationRecord struct {
	Url              string         `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty" json:"url" yaml:"url"`
	RepoReference    *HashReference `protobuf:"bytes,2,opt,name=repo_reference,json=repoReference,proto3" json:"repo_reference,omitempty" json:"repoReference" yaml:"repoReference"`
	BuildArtifactRef *HashReference `protobuf:"bytes,3,opt,name=build_artifact_ref,json=buildArtifactRef,proto3" json:"build_artifact_ref,omitempty" json:"buildArtifactRef" yaml:"buildArtifactRef"`
	TlsCertRef       *HashReference `protobuf:"bytes,4,opt,name=tls_cert_ref,json=tlsCertRef,proto3" json:"tls_cert_ref,omitempty" json:"tlsCertRef" yaml:"tlsCertRef"`
	Type             string         `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty" json:"type" yaml:"type"`
	Version          string         `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty" json:"version" yaml:"version"`
}

func (m *WebsiteRegistrationRecord) Reset()         { *m = WebsiteRegistrationRecord{} }
func (m *WebsiteRegistrationRecord) String() string { return proto.CompactTextString(m) }
func (*WebsiteRegistrationRecord) ProtoMessage()    {}
func (*WebsiteRegistrationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{2}
}
func (m *WebsiteRegistrationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebsiteRegistrationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebsiteRegistrationRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebsiteRegistrationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebsiteRegistrationRecord.Merge(m, src)
}
func (m *WebsiteRegistrationRecord) XXX_Size() int {
	return m.Size()
}
func (m *WebsiteRegistrationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_WebsiteRegistrationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_WebsiteRegistrationRecord proto.InternalMessageInfo

func (m *WebsiteRegistrationRecord) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *WebsiteRegistrationRecord) GetRepoReference() *HashReference {
	if m != nil {
		return m.RepoReference
	}
	return nil
}

func (m *WebsiteRegistrationRecord) GetBuildArtifactRef() *HashReference {
	if m != nil {
		return m.BuildArtifactRef
	}
	return nil
}

func (m *WebsiteRegistrationRecord) GetTlsCertRef() *HashReference {
	if m != nil {
		return m.TlsCertRef
	}
	return nil
}

func (m *WebsiteRegistrationRecord) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *WebsiteRegistrationRecord) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type GitRepository struct {
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" json:"name" yaml:"name"`
	RepoReference string `protobuf:"bytes,2,opt,name=repo_reference,json=repoReference,proto3" json:"repo_reference,omitempty" json:"repo_reference" yaml:"repo_reference"`
	Description   string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" json:"description" yaml:"description"`
	Version       string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty" json:"version" yaml:"version"`
	Type          string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty" json:"type" yaml:"type"`
}

func (m *GitRepository) Reset()         { *m = GitRepository{} }
func (m *GitRepository) String() string { return proto.CompactTextString(m) }
func (*GitRepository) ProtoMessage()    {}
func (*GitRepository) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{3}
}
func (m *GitRepository) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GitRepository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GitRepository.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GitRepository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitRepository.Merge(m, src)
}
func (m *GitRepository) XXX_Size() int {
	return m.Size()
}
func (m *GitRepository) XXX_DiscardUnknown() {
	xxx_messageInfo_GitRepository.DiscardUnknown(m)
}

var xxx_messageInfo_GitRepository proto.InternalMessageInfo

func (m *GitRepository) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GitRepository) GetRepoReference() string {
	if m != nil {
		return m.RepoReference
	}
	return ""
}

func (m *GitRepository) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GitRepository) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GitRepository) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Binary struct {
	HashReference  *HashReference `protobuf:"bytes,1,opt,name=hash_reference,json=hashReference,proto3" json:"hash_reference,omitempty"`
	TargetedArch   string         `protobuf:"bytes,2,opt,name=targeted_arch,json=targetedArch,proto3" json:"targeted_arch,omitempty"`
	RuntimeVersion string         `protobuf:"bytes,3,opt,name=runtime_version,json=runtimeVersion,proto3" json:"runtime_version,omitempty"`
	RepoReference  *HashReference `protobuf:"bytes,4,opt,name=repo_reference,json=repoReference,proto3" json:"repo_reference,omitempty"`
	Version        string         `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Type           string         `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *Binary) Reset()         { *m = Binary{} }
func (m *Binary) String() string { return proto.CompactTextString(m) }
func (*Binary) ProtoMessage()    {}
func (*Binary) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{4}
}
func (m *Binary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Binary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Binary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Binary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Binary.Merge(m, src)
}
func (m *Binary) XXX_Size() int {
	return m.Size()
}
func (m *Binary) XXX_DiscardUnknown() {
	xxx_messageInfo_Binary.DiscardUnknown(m)
}

var xxx_messageInfo_Binary proto.InternalMessageInfo

func (m *Binary) GetHashReference() *HashReference {
	if m != nil {
		return m.HashReference
	}
	return nil
}

func (m *Binary) GetTargetedArch() string {
	if m != nil {
		return m.TargetedArch
	}
	return ""
}

func (m *Binary) GetRuntimeVersion() string {
	if m != nil {
		return m.RuntimeVersion
	}
	return ""
}

func (m *Binary) GetRepoReference() *HashReference {
	if m != nil {
		return m.RepoReference
	}
	return nil
}

func (m *Binary) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Binary) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type DockerImage struct {
	ImageId         string         `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	BinaryReference *HashReference `protobuf:"bytes,2,opt,name=binary_reference,json=binaryReference,proto3" json:"binary_reference,omitempty"`
	RepoReference   *HashReference `protobuf:"bytes,3,opt,name=repo_reference,json=repoReference,proto3" json:"repo_reference,omitempty"`
	Version         string         `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Type            string         `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *DockerImage) Reset()         { *m = DockerImage{} }
func (m *DockerImage) String() string { return proto.CompactTextString(m) }
func (*DockerImage) ProtoMessage()    {}
func (*DockerImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{5}
}
func (m *DockerImage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DockerImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DockerImage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DockerImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DockerImage.Merge(m, src)
}
func (m *DockerImage) XXX_Size() int {
	return m.Size()
}
func (m *DockerImage) XXX_DiscardUnknown() {
	xxx_messageInfo_DockerImage.DiscardUnknown(m)
}

var xxx_messageInfo_DockerImage proto.InternalMessageInfo

func (m *DockerImage) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *DockerImage) GetBinaryReference() *HashReference {
	if m != nil {
		return m.BinaryReference
	}
	return nil
}

func (m *DockerImage) GetRepoReference() *HashReference {
	if m != nil {
		return m.RepoReference
	}
	return nil
}

func (m *DockerImage) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *DockerImage) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type WatcherRegistrationRecord struct {
	Metadata      *WatcherRegistrationRecord_WatcherMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	RepoReference *HashReference                             `protobuf:"bytes,2,opt,name=repo_reference,json=repoReference,proto3" json:"repo_reference,omitempty"`
	Wasm          *WatcherRegistrationRecord_WASMBinary      `protobuf:"bytes,3,opt,name=wasm,proto3" json:"wasm,omitempty"`
	Version       string                                     `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Type          string                                     `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *WatcherRegistrationRecord) Reset()         { *m = WatcherRegistrationRecord{} }
func (m *WatcherRegistrationRecord) String() string { return proto.CompactTextString(m) }
func (*WatcherRegistrationRecord) ProtoMessage()    {}
func (*WatcherRegistrationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{6}
}
func (m *WatcherRegistrationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatcherRegistrationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatcherRegistrationRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatcherRegistrationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatcherRegistrationRecord.Merge(m, src)
}
func (m *WatcherRegistrationRecord) XXX_Size() int {
	return m.Size()
}
func (m *WatcherRegistrationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_WatcherRegistrationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_WatcherRegistrationRecord proto.InternalMessageInfo

func (m *WatcherRegistrationRecord) GetMetadata() *WatcherRegistrationRecord_WatcherMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *WatcherRegistrationRecord) GetRepoReference() *HashReference {
	if m != nil {
		return m.RepoReference
	}
	return nil
}

func (m *WatcherRegistrationRecord) GetWasm() *WatcherRegistrationRecord_WASMBinary {
	if m != nil {
		return m.Wasm
	}
	return nil
}

func (m *WatcherRegistrationRecord) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *WatcherRegistrationRecord) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type WatcherRegistrationRecord_WatcherMetadata struct {
	Version        string         `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ChainReference *HashReference `protobuf:"bytes,2,opt,name=chain_reference,json=chainReference,proto3" json:"chain_reference,omitempty"`
}

func (m *WatcherRegistrationRecord_WatcherMetadata) Reset() {
	*m = WatcherRegistrationRecord_WatcherMetadata{}
}
func (m *WatcherRegistrationRecord_WatcherMetadata) String() string {
	return proto.CompactTextString(m)
}
func (*WatcherRegistrationRecord_WatcherMetadata) ProtoMessage() {}
func (*WatcherRegistrationRecord_WatcherMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{6, 0}
}
func (m *WatcherRegistrationRecord_WatcherMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatcherRegistrationRecord_WatcherMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatcherRegistrationRecord_WatcherMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatcherRegistrationRecord_WatcherMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatcherRegistrationRecord_WatcherMetadata.Merge(m, src)
}
func (m *WatcherRegistrationRecord_WatcherMetadata) XXX_Size() int {
	return m.Size()
}
func (m *WatcherRegistrationRecord_WatcherMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_WatcherRegistrationRecord_WatcherMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_WatcherRegistrationRecord_WatcherMetadata proto.InternalMessageInfo

func (m *WatcherRegistrationRecord_WatcherMetadata) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *WatcherRegistrationRecord_WatcherMetadata) GetChainReference() *HashReference {
	if m != nil {
		return m.ChainReference
	}
	return nil
}

type WatcherRegistrationRecord_WASMBinary struct {
	HashReference *HashReference                                `protobuf:"bytes,1,opt,name=hash_reference,json=hashReference,proto3" json:"hash_reference,omitempty"`
	Metadata      *WatcherRegistrationRecord_WASMBinaryMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *WatcherRegistrationRecord_WASMBinary) Reset()         { *m = WatcherRegistrationRecord_WASMBinary{} }
func (m *WatcherRegistrationRecord_WASMBinary) String() string { return proto.CompactTextString(m) }
func (*WatcherRegistrationRecord_WASMBinary) ProtoMessage()    {}
func (*WatcherRegistrationRecord_WASMBinary) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{6, 1}
}
func (m *WatcherRegistrationRecord_WASMBinary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatcherRegistrationRecord_WASMBinary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatcherRegistrationRecord_WASMBinary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatcherRegistrationRecord_WASMBinary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatcherRegistrationRecord_WASMBinary.Merge(m, src)
}
func (m *WatcherRegistrationRecord_WASMBinary) XXX_Size() int {
	return m.Size()
}
func (m *WatcherRegistrationRecord_WASMBinary) XXX_DiscardUnknown() {
	xxx_messageInfo_WatcherRegistrationRecord_WASMBinary.DiscardUnknown(m)
}

var xxx_messageInfo_WatcherRegistrationRecord_WASMBinary proto.InternalMessageInfo

func (m *WatcherRegistrationRecord_WASMBinary) GetHashReference() *HashReference {
	if m != nil {
		return m.HashReference
	}
	return nil
}

func (m *WatcherRegistrationRecord_WASMBinary) GetMetadata() *WatcherRegistrationRecord_WASMBinaryMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type WatcherRegistrationRecord_WASMBinaryMetadata struct {
	CompilerVersion        string `protobuf:"bytes,1,opt,name=compiler_version,json=compilerVersion,proto3" json:"compiler_version,omitempty"`
	ExecutionEngineVersion string `protobuf:"bytes,2,opt,name=execution_engine_version,json=executionEngineVersion,proto3" json:"execution_engine_version,omitempty"`
}

func (m *WatcherRegistrationRecord_WASMBinaryMetadata) Reset() {
	*m = WatcherRegistrationRecord_WASMBinaryMetadata{}
}
func (m *WatcherRegistrationRecord_WASMBinaryMetadata) String() string {
	return proto.CompactTextString(m)
}
func (*WatcherRegistrationRecord_WASMBinaryMetadata) ProtoMessage() {}
func (*WatcherRegistrationRecord_WASMBinaryMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{6, 2}
}
func (m *WatcherRegistrationRecord_WASMBinaryMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatcherRegistrationRecord_WASMBinaryMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatcherRegistrationRecord_WASMBinaryMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatcherRegistrationRecord_WASMBinaryMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatcherRegistrationRecord_WASMBinaryMetadata.Merge(m, src)
}
func (m *WatcherRegistrationRecord_WASMBinaryMetadata) XXX_Size() int {
	return m.Size()
}
func (m *WatcherRegistrationRecord_WASMBinaryMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_WatcherRegistrationRecord_WASMBinaryMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_WatcherRegistrationRecord_WASMBinaryMetadata proto.InternalMessageInfo

func (m *WatcherRegistrationRecord_WASMBinaryMetadata) GetCompilerVersion() string {
	if m != nil {
		return m.CompilerVersion
	}
	return ""
}

func (m *WatcherRegistrationRecord_WASMBinaryMetadata) GetExecutionEngineVersion() string {
	if m != nil {
		return m.ExecutionEngineVersion
	}
	return ""
}

type ResponderContract struct {
	ServiceProviderRef *HashReference `protobuf:"bytes,1,opt,name=service_provider_ref,json=serviceProviderRef,proto3" json:"service_provider_ref,omitempty"`
	AuctionRef         *HashReference `protobuf:"bytes,2,opt,name=auction_ref,json=auctionRef,proto3" json:"auction_ref,omitempty"`
	WatcherRef         *HashReference `protobuf:"bytes,3,opt,name=watcher_ref,json=watcherRef,proto3" json:"watcher_ref,omitempty"`
	Version            string         `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Type               string         `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *ResponderContract) Reset()         { *m = ResponderContract{} }
func (m *ResponderContract) String() string { return proto.CompactTextString(m) }
func (*ResponderContract) ProtoMessage()    {}
func (*ResponderContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{7}
}
func (m *ResponderContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponderContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponderContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponderContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponderContract.Merge(m, src)
}
func (m *ResponderContract) XXX_Size() int {
	return m.Size()
}
func (m *ResponderContract) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponderContract.DiscardUnknown(m)
}

var xxx_messageInfo_ResponderContract proto.InternalMessageInfo

func (m *ResponderContract) GetServiceProviderRef() *HashReference {
	if m != nil {
		return m.ServiceProviderRef
	}
	return nil
}

func (m *ResponderContract) GetAuctionRef() *HashReference {
	if m != nil {
		return m.AuctionRef
	}
	return nil
}

func (m *ResponderContract) GetWatcherRef() *HashReference {
	if m != nil {
		return m.WatcherRef
	}
	return nil
}

func (m *ResponderContract) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ResponderContract) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type JSPackage struct {
	RepoReference *HashReference `protobuf:"bytes,1,opt,name=repo_reference,json=repoReference,proto3" json:"repo_reference,omitempty"`
	JsPackageRef  *HashReference `protobuf:"bytes,2,opt,name=js_package_ref,json=jsPackageRef,proto3" json:"js_package_ref,omitempty"`
	Version       string         `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Type          string         `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Name          string         `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *JSPackage) Reset()         { *m = JSPackage{} }
func (m *JSPackage) String() string { return proto.CompactTextString(m) }
func (*JSPackage) ProtoMessage()    {}
func (*JSPackage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{8}
}
func (m *JSPackage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JSPackage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JSPackage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JSPackage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JSPackage.Merge(m, src)
}
func (m *JSPackage) XXX_Size() int {
	return m.Size()
}
func (m *JSPackage) XXX_DiscardUnknown() {
	xxx_messageInfo_JSPackage.DiscardUnknown(m)
}

var xxx_messageInfo_JSPackage proto.InternalMessageInfo

func (m *JSPackage) GetRepoReference() *HashReference {
	if m != nil {
		return m.RepoReference
	}
	return nil
}

func (m *JSPackage) GetJsPackageRef() *HashReference {
	if m != nil {
		return m.JsPackageRef
	}
	return nil
}

func (m *JSPackage) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *JSPackage) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *JSPackage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ChainRegistrationRecord struct {
	Name        string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IpldTypes   []string       `protobuf:"bytes,2,rep,name=ipld_types,json=ipldTypes,proto3" json:"ipld_types,omitempty"`
	Type        string         `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Version     string         `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	ChainId     string         `protobuf:"bytes,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	NetworkId   string         `protobuf:"bytes,6,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	GenesisHash *HashReference `protobuf:"bytes,7,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty"`
}

func (m *ChainRegistrationRecord) Reset()         { *m = ChainRegistrationRecord{} }
func (m *ChainRegistrationRecord) String() string { return proto.CompactTextString(m) }
func (*ChainRegistrationRecord) ProtoMessage()    {}
func (*ChainRegistrationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_f305abc771332c96, []int{9}
}
func (m *ChainRegistrationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainRegistrationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainRegistrationRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainRegistrationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainRegistrationRecord.Merge(m, src)
}
func (m *ChainRegistrationRecord) XXX_Size() int {
	return m.Size()
}
func (m *ChainRegistrationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainRegistrationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ChainRegistrationRecord proto.InternalMessageInfo

func (m *ChainRegistrationRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChainRegistrationRecord) GetIpldTypes() []string {
	if m != nil {
		return m.IpldTypes
	}
	return nil
}

func (m *ChainRegistrationRecord) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ChainRegistrationRecord) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ChainRegistrationRecord) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ChainRegistrationRecord) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *ChainRegistrationRecord) GetGenesisHash() *HashReference {
	if m != nil {
		return m.GenesisHash
	}
	return nil
}

func init() {
	proto.RegisterType((*HashReference)(nil), "vulcanize.registry.v1beta1.HashReference")
	proto.RegisterType((*ServiceProviderRecord)(nil), "vulcanize.registry.v1beta1.ServiceProviderRecord")
	proto.RegisterType((*ServiceProviderRecord_X500)(nil), "vulcanize.registry.v1beta1.ServiceProviderRecord.X500")
	proto.RegisterType((*WebsiteRegistrationRecord)(nil), "vulcanize.registry.v1beta1.WebsiteRegistrationRecord")
	proto.RegisterType((*GitRepository)(nil), "vulcanize.registry.v1beta1.GitRepository")
	proto.RegisterType((*Binary)(nil), "vulcanize.registry.v1beta1.Binary")
	proto.RegisterType((*DockerImage)(nil), "vulcanize.registry.v1beta1.DockerImage")
	proto.RegisterType((*WatcherRegistrationRecord)(nil), "vulcanize.registry.v1beta1.WatcherRegistrationRecord")
	proto.RegisterType((*WatcherRegistrationRecord_WatcherMetadata)(nil), "vulcanize.registry.v1beta1.WatcherRegistrationRecord.WatcherMetadata")
	proto.RegisterType((*WatcherRegistrationRecord_WASMBinary)(nil), "vulcanize.registry.v1beta1.WatcherRegistrationRecord.WASMBinary")
	proto.RegisterType((*WatcherRegistrationRecord_WASMBinaryMetadata)(nil), "vulcanize.registry.v1beta1.WatcherRegistrationRecord.WASMBinaryMetadata")
	proto.RegisterType((*ResponderContract)(nil), "vulcanize.registry.v1beta1.ResponderContract")
	proto.RegisterType((*JSPackage)(nil), "vulcanize.registry.v1beta1.JSPackage")
	proto.RegisterType((*ChainRegistrationRecord)(nil), "vulcanize.registry.v1beta1.ChainRegistrationRecord")
}

func init() {
	proto.RegisterFile("vulcanize/registry/v1beta1/attributes.proto", fileDescriptor_f305abc771332c96)
}

var fileDescriptor_f305abc771332c96 = []byte{
	// 1307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4f, 0x6f, 0x13, 0x47,
	0x14, 0x67, 0x6d, 0x93, 0xe0, 0xe7, 0xfc, 0x63, 0x04, 0xc5, 0x09, 0x22, 0x0e, 0x46, 0x08, 0xa2,
	0x14, 0x3b, 0x80, 0xa8, 0x50, 0x7b, 0x29, 0x01, 0x5a, 0x42, 0x4b, 0x1b, 0x0d, 0x14, 0xaa, 0xf6,
	0xb0, 0x1d, 0xef, 0x4e, 0xec, 0x01, 0x7b, 0xc7, 0x9a, 0x1d, 0x27, 0xb8, 0x17, 0xa4, 0x9e, 0x7b,
	0xe8, 0xad, 0x5f, 0xa1, 0x9f, 0xa0, 0xa7, 0x1e, 0x7b, 0xe8, 0x11, 0xa9, 0x97, 0xaa, 0x07, 0xab,
	0x82, 0x53, 0x6f, 0x95, 0x3f, 0x40, 0x55, 0xcd, 0x9f, 0xdd, 0x1d, 0xdb, 0x01, 0xc9, 0xa4, 0xed,
	0x6d, 0xe6, 0xbd, 0x79, 0xbf, 0xf7, 0xe6, 0x37, 0xef, 0x3d, 0xbf, 0x35, 0x6c, 0xec, 0xf5, 0xda,
	0x01, 0x89, 0xd8, 0xd7, 0xb4, 0x2e, 0x68, 0x93, 0xc5, 0x52, 0xf4, 0xeb, 0x7b, 0x97, 0x1b, 0x54,
	0x92, 0xcb, 0x75, 0x22, 0xa5, 0x60, 0x8d, 0x9e, 0xa4, 0x71, 0xad, 0x2b, 0xb8, 0xe4, 0x68, 0x25,
	0x3d, 0x5c, 0x4b, 0x0e, 0xd7, 0xec, 0xe1, 0x95, 0x13, 0x4d, 0xde, 0xe4, 0xfa, 0x58, 0x5d, 0xad,
	0x8c, 0x45, 0xf5, 0x2c, 0xcc, 0xdf, 0x21, 0x71, 0x0b, 0xd3, 0x5d, 0x2a, 0x68, 0x14, 0x50, 0xb4,
	0x04, 0x79, 0x41, 0x77, 0xcb, 0xde, 0x9a, 0x77, 0xb1, 0x88, 0xd5, 0xb2, 0xfa, 0xfb, 0x0c, 0x9c,
	0xbc, 0x4f, 0xc5, 0x1e, 0x0b, 0xe8, 0x8e, 0xe0, 0x7b, 0x2c, 0xa4, 0x02, 0xd3, 0x80, 0x8b, 0x10,
	0x5d, 0x87, 0xd9, 0x06, 0x8f, 0x42, 0x9f, 0x85, 0xe6, 0xfc, 0x56, 0x65, 0x38, 0xa8, 0x9c, 0x7e,
	0x1c, 0xf3, 0xe8, 0xdd, 0xaa, 0x52, 0x6c, 0x87, 0xd5, 0xb5, 0x3e, 0xe9, 0xb4, 0xd3, 0x1d, 0x9e,
	0x31, 0x0b, 0x74, 0x0b, 0xa0, 0x4d, 0x02, 0x1e, 0xb1, 0x40, 0x19, 0xe7, 0xb4, 0xf1, 0xf9, 0xe1,
	0xa0, 0x72, 0xd6, 0x18, 0x5b, 0x5d, 0x66, 0x9f, 0x09, 0x70, 0x31, 0x5d, 0xa3, 0x26, 0x14, 0x9e,
	0x5e, 0xdb, 0xdc, 0x2c, 0xe7, 0xd7, 0xbc, 0x8b, 0xa5, 0x2b, 0xef, 0xd4, 0x5e, 0x7d, 0xfb, 0xda,
	0x81, 0x17, 0xa8, 0x7d, 0x7e, 0x6d, 0x73, 0x73, 0xeb, 0xf4, 0x70, 0x50, 0x39, 0x65, 0xfc, 0x2a,
	0xb4, 0xc4, 0xa5, 0x5e, 0x63, 0xed, 0x00, 0xd5, 0xa1, 0x20, 0xfb, 0x5d, 0x5a, 0x2e, 0xe8, 0x40,
	0x1d, 0x03, 0x25, 0x4d, 0x0c, 0xf4, 0x1a, 0xeb, 0x83, 0xe8, 0x3d, 0x98, 0xdd, 0xa3, 0x22, 0x66,
	0x3c, 0x2a, 0xcf, 0x68, 0x9b, 0xb3, 0xc3, 0x41, 0xe5, 0x8c, 0xb1, 0xb1, 0x8a, 0xc4, 0x2c, 0xd9,
	0xe2, 0xc4, 0x62, 0xe5, 0xcf, 0x3c, 0x14, 0x54, 0x64, 0xe8, 0x0e, 0x94, 0x02, 0xde, 0xe9, 0xf0,
	0xc8, 0x8f, 0x48, 0x87, 0x5a, 0x8e, 0x2f, 0x0c, 0x07, 0x95, 0x73, 0x06, 0xc9, 0x28, 0x3f, 0x21,
	0x9d, 0x34, 0x06, 0x47, 0x82, 0x21, 0xdb, 0xa0, 0xaf, 0xe0, 0x38, 0x17, 0x4d, 0xc5, 0x0d, 0x91,
	0x8c, 0x47, 0x7e, 0x2f, 0x62, 0xd2, 0xd2, 0x7e, 0x75, 0x38, 0xa8, 0xd4, 0x0d, 0x9e, 0x7b, 0xe4,
	0xb3, 0x88, 0xc9, 0x04, 0x75, 0x42, 0x8e, 0x97, 0xc6, 0x45, 0x13, 0x1e, 0x74, 0xc4, 0xf9, 0xd7,
	0x79, 0x70, 0xe3, 0x9e, 0x90, 0x8f, 0x7a, 0xd0, 0x77, 0xd8, 0x81, 0xf9, 0x36, 0x0f, 0x48, 0x9b,
	0xc9, 0xbe, 0x41, 0x37, 0xaf, 0xb1, 0x31, 0x1c, 0x54, 0x2e, 0xd8, 0xb4, 0xb1, 0x6a, 0x17, 0x79,
	0x44, 0x86, 0xe7, 0xdc, 0xad, 0xca, 0xc2, 0x58, 0x12, 0x49, 0x0d, 0xdc, 0xd1, 0xf1, 0x2c, 0xd4,
	0x3a, 0x17, 0x2b, 0x13, 0xe0, 0x62, 0xba, 0x56, 0x6f, 0x1d, 0xf0, 0x5e, 0x24, 0x45, 0x7f, 0xf2,
	0xad, 0xad, 0x22, 0x7b, 0x1e, 0xb3, 0xc5, 0x89, 0x45, 0xf5, 0xa7, 0x02, 0x2c, 0x3f, 0xa2, 0x8d,
	0x98, 0x49, 0x8a, 0x4d, 0xce, 0xea, 0x0b, 0xdb, 0x02, 0xdb, 0x80, 0x7c, 0x4f, 0xb4, 0xed, 0xc3,
	0x2f, 0x0f, 0x07, 0x95, 0x93, 0x06, 0xb6, 0x27, 0xda, 0x09, 0xa4, 0x5a, 0x62, 0x75, 0x0a, 0x3d,
	0x83, 0x05, 0x41, 0xbb, 0xdc, 0x17, 0x49, 0x2d, 0xeb, 0x07, 0x2e, 0x5d, 0x59, 0x7f, 0x5d, 0x5d,
	0x8c, 0x14, 0xff, 0xd6, 0xa5, 0xe1, 0xa0, 0xb2, 0x6e, 0x5c, 0x28, 0xa8, 0x54, 0x91, 0x38, 0x1b,
	0x15, 0xe2, 0xf9, 0x91, 0x3d, 0xfa, 0xd6, 0x03, 0xd4, 0xe8, 0xb1, 0x76, 0xe8, 0x13, 0x21, 0xd9,
	0x2e, 0x09, 0xa4, 0x8a, 0xc5, 0x56, 0xe7, 0x14, 0x51, 0x38, 0xf9, 0xa2, 0xe1, 0x6e, 0x58, 0x34,
	0x4c, 0x77, 0xd3, 0x7e, 0x32, 0x2e, 0xc7, 0x4b, 0xe3, 0x22, 0x24, 0x61, 0x4e, 0xb6, 0x63, 0x3f,
	0xa0, 0xc2, 0xc4, 0x51, 0x98, 0x36, 0x0e, 0xa7, 0xd2, 0x64, 0x3b, 0xbe, 0x49, 0x85, 0x1b, 0x81,
	0x23, 0xc1, 0x90, 0x6d, 0xd2, 0x56, 0x71, 0xf4, 0xff, 0x68, 0x15, 0xd5, 0x5f, 0x73, 0x30, 0xff,
	0x21, 0x93, 0x98, 0x76, 0x79, 0xcc, 0x24, 0x17, 0x7d, 0xe5, 0xdf, 0x69, 0x16, 0x8e, 0xff, 0xc8,
	0x49, 0x64, 0xbd, 0xc6, 0xfa, 0x20, 0x7a, 0x78, 0x60, 0xda, 0x14, 0xb7, 0xea, 0xc3, 0x41, 0x65,
	0x23, 0xcb, 0x85, 0x4c, 0xef, 0x26, 0x83, 0x23, 0x1d, 0xcf, 0x86, 0x8f, 0xa0, 0x14, 0xd2, 0x38,
	0x10, 0xac, 0xab, 0x12, 0xda, 0xb6, 0x82, 0xf5, 0xe1, 0xa0, 0x72, 0xde, 0x80, 0x3a, 0xca, 0x04,
	0xd1, 0x15, 0x61, 0xd7, 0xda, 0x25, 0xa9, 0x30, 0x2d, 0x49, 0x53, 0x3f, 0x49, 0xf5, 0x87, 0x1c,
	0xcc, 0x6c, 0xb1, 0x88, 0x88, 0x3e, 0xda, 0x81, 0x85, 0x16, 0x89, 0x5b, 0x0e, 0x3b, 0xde, 0x94,
	0x69, 0x84, 0xe7, 0x5b, 0x23, 0x3f, 0xb0, 0xe7, 0x60, 0x5e, 0x12, 0xd1, 0xa4, 0x92, 0xaa, 0x3a,
	0x09, 0x5a, 0x86, 0x6e, 0x3c, 0x97, 0x08, 0x6f, 0x88, 0xa0, 0x85, 0x2e, 0xc0, 0xa2, 0xe8, 0x45,
	0x92, 0x75, 0xa8, 0x9f, 0xdc, 0x5b, 0x13, 0x88, 0x17, 0xac, 0xf8, 0xa1, 0xbd, 0xdb, 0xce, 0xc4,
	0xeb, 0x15, 0xa6, 0x8e, 0x6f, 0xf4, 0xdd, 0xca, 0x19, 0xd5, 0x9a, 0xb0, 0x8c, 0x47, 0x64, 0x79,
	0xd4, 0x69, 0x6a, 0xa9, 0xfa, 0xdb, 0x83, 0xd2, 0x2d, 0x1e, 0x3c, 0xa1, 0x62, 0xbb, 0x43, 0x9a,
	0x14, 0x2d, 0xc3, 0x31, 0xa6, 0x16, 0xe9, 0x4c, 0x80, 0x67, 0xf5, 0x7e, 0x3b, 0x44, 0x0f, 0x60,
	0xa9, 0xa1, 0x49, 0x3d, 0x44, 0x87, 0xc2, 0x8b, 0x06, 0x22, 0x0b, 0x77, 0x92, 0x80, 0xfc, 0xbf,
	0x47, 0x40, 0xe1, 0x60, 0x02, 0x8e, 0x3a, 0x04, 0x7c, 0x3f, 0x03, 0xcb, 0x8f, 0x88, 0x0c, 0x5a,
	0x6a, 0xa8, 0x98, 0x68, 0xe0, 0x04, 0x8e, 0x75, 0xa8, 0x24, 0x21, 0x91, 0xc4, 0x26, 0xce, 0xed,
	0xd7, 0xc5, 0xf5, 0x4a, 0xa0, 0x44, 0x73, 0xcf, 0x82, 0xe1, 0x14, 0xf6, 0x00, 0x02, 0x72, 0x87,
	0x24, 0xe0, 0x01, 0x14, 0xf6, 0x49, 0xdc, 0xb1, 0x44, 0xbe, 0xff, 0x86, 0x01, 0xdf, 0xb8, 0x7f,
	0xcf, 0xd4, 0x10, 0xd6, 0x68, 0xd3, 0xd1, 0xba, 0xf2, 0x0c, 0x16, 0xc7, 0xae, 0xec, 0x02, 0x78,
	0xa3, 0x00, 0x18, 0x16, 0x83, 0x16, 0x61, 0xd1, 0x61, 0x38, 0x58, 0xd0, 0x08, 0xe9, 0x7e, 0xe5,
	0x67, 0x0f, 0x20, 0xbb, 0xc3, 0x7f, 0xd0, 0x07, 0x42, 0x27, 0x35, 0x4c, 0xb4, 0x77, 0x0e, 0xcb,
	0xf4, 0x64, 0x76, 0xac, 0xf4, 0x01, 0x4d, 0xea, 0xd1, 0x3a, 0x2c, 0x05, 0xbc, 0xd3, 0x65, 0x6d,
	0x2a, 0xfc, 0x51, 0x4e, 0x17, 0x13, 0x79, 0xd2, 0x60, 0xae, 0x43, 0x99, 0x3e, 0xa5, 0x41, 0x4f,
	0x0f, 0x75, 0x34, 0x6a, 0xb2, 0x28, 0x6b, 0x49, 0xa6, 0x73, 0xbd, 0x95, 0xea, 0x6f, 0x6b, 0xb5,
	0xb5, 0xac, 0xfe, 0x98, 0x83, 0xe3, 0x98, 0xc6, 0x5d, 0x1e, 0x85, 0x54, 0xdc, 0xe4, 0x91, 0x14,
	0x24, 0x90, 0xe8, 0x4b, 0x38, 0x11, 0x9b, 0x59, 0xdc, 0xef, 0xda, 0x61, 0xdc, 0x4f, 0x3e, 0x38,
	0xa6, 0xa2, 0x13, 0xc5, 0xe3, 0x23, 0xfd, 0x2e, 0xba, 0x0b, 0x25, 0xd2, 0x0b, 0x74, 0xa8, 0x0a,
	0x73, 0xea, 0x24, 0x00, 0x6b, 0x6d, 0xb1, 0xf6, 0x0d, 0xe7, 0x6f, 0x34, 0xc5, 0x60, 0xd8, 0x4f,
	0x5e, 0x6c, 0x77, 0xca, 0x96, 0xf2, 0x97, 0x07, 0xc5, 0xbb, 0xf7, 0x77, 0x48, 0xf0, 0x44, 0x75,
	0xd4, 0xc9, 0xfa, 0xf6, 0x0e, 0x59, 0xdf, 0x9f, 0xc2, 0xc2, 0xe3, 0xd8, 0xef, 0x1a, 0xfc, 0x37,
	0x23, 0x6a, 0xee, 0x71, 0x6c, 0xe3, 0x1b, 0xbb, 0x5e, 0xfe, 0xe0, 0xeb, 0x15, 0xb2, 0xeb, 0x29,
	0x59, 0x36, 0x6f, 0x9b, 0x21, 0xa4, 0xfa, 0x4d, 0x0e, 0x4e, 0xdd, 0x34, 0x05, 0x38, 0xd1, 0x43,
	0x91, 0x3b, 0xd1, 0xd8, 0xa1, 0xe5, 0x0c, 0x00, 0xeb, 0xb6, 0x43, 0x5f, 0x01, 0xc6, 0xe5, 0xdc,
	0x5a, 0xfe, 0x62, 0x11, 0x17, 0x95, 0xe4, 0x81, 0x12, 0xa4, 0x6e, 0xf3, 0x8e, 0xdb, 0x57, 0xbf,
	0xc1, 0x32, 0x1c, 0x33, 0xed, 0x83, 0x85, 0xc9, 0x4f, 0x9e, 0xde, 0x6f, 0x87, 0xca, 0x4f, 0x44,
	0xe5, 0x3e, 0x17, 0x4f, 0x94, 0xd2, 0xfc, 0xf0, 0x15, 0xad, 0x64, 0x3b, 0x44, 0x1f, 0xc3, 0x5c,
	0x93, 0x46, 0x34, 0x66, 0xb1, 0xaf, 0x8a, 0xbb, 0x3c, 0x3b, 0x2d, 0x8f, 0x25, 0x6b, 0xae, 0xa4,
	0x5b, 0x1f, 0xfc, 0xf2, 0x62, 0xd5, 0x7b, 0xfe, 0x62, 0xd5, 0xfb, 0xe3, 0xc5, 0xaa, 0xf7, 0xdd,
	0xcb, 0xd5, 0x23, 0xcf, 0x5f, 0xae, 0x1e, 0xf9, 0xed, 0xe5, 0xea, 0x91, 0x2f, 0xde, 0x6e, 0x32,
	0xd9, 0xea, 0x35, 0x6a, 0x01, 0xef, 0xd4, 0x03, 0x2a, 0x82, 0x4b, 0x8c, 0xd7, 0xed, 0x67, 0x70,
	0x58, 0x7f, 0x9a, 0xfd, 0x31, 0xa0, 0xe9, 0x68, 0xcc, 0xe8, 0x4f, 0xfb, 0xab, 0xff, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x55, 0x17, 0xd9, 0x4d, 0x3b, 0x10, 0x00, 0x00,
}

func (m *HashReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HashReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ref) > 0 {
		i -= len(m.Ref)
		copy(dAtA[i:], m.Ref)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Ref)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceProviderRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceProviderRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceProviderRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if m.X500 != nil {
		{
			size, err := m.X500.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LaconicId) > 0 {
		i -= len(m.LaconicId)
		copy(dAtA[i:], m.LaconicId)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.LaconicId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BondId) > 0 {
		i -= len(m.BondId)
		copy(dAtA[i:], m.BondId)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.BondId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceProviderRecord_X500) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceProviderRecord_X500) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceProviderRecord_X500) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StateName) > 0 {
		i -= len(m.StateName)
		copy(dAtA[i:], m.StateName)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.StateName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LocalityName) > 0 {
		i -= len(m.LocalityName)
		copy(dAtA[i:], m.LocalityName)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.LocalityName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrganizationName) > 0 {
		i -= len(m.OrganizationName)
		copy(dAtA[i:], m.OrganizationName)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.OrganizationName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrganizationUnit) > 0 {
		i -= len(m.OrganizationUnit)
		copy(dAtA[i:], m.OrganizationUnit)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.OrganizationUnit)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CommonName) > 0 {
		i -= len(m.CommonName)
		copy(dAtA[i:], m.CommonName)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.CommonName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WebsiteRegistrationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebsiteRegistrationRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebsiteRegistrationRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TlsCertRef != nil {
		{
			size, err := m.TlsCertRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BuildArtifactRef != nil {
		{
			size, err := m.BuildArtifactRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RepoReference != nil {
		{
			size, err := m.RepoReference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GitRepository) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GitRepository) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GitRepository) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RepoReference) > 0 {
		i -= len(m.RepoReference)
		copy(dAtA[i:], m.RepoReference)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.RepoReference)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Binary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Binary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Binary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RepoReference != nil {
		{
			size, err := m.RepoReference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.RuntimeVersion) > 0 {
		i -= len(m.RuntimeVersion)
		copy(dAtA[i:], m.RuntimeVersion)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.RuntimeVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TargetedArch) > 0 {
		i -= len(m.TargetedArch)
		copy(dAtA[i:], m.TargetedArch)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.TargetedArch)))
		i--
		dAtA[i] = 0x12
	}
	if m.HashReference != nil {
		{
			size, err := m.HashReference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DockerImage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DockerImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DockerImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if m.RepoReference != nil {
		{
			size, err := m.RepoReference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BinaryReference != nil {
		{
			size, err := m.BinaryReference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ImageId) > 0 {
		i -= len(m.ImageId)
		copy(dAtA[i:], m.ImageId)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.ImageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatcherRegistrationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatcherRegistrationRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatcherRegistrationRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if m.Wasm != nil {
		{
			size, err := m.Wasm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RepoReference != nil {
		{
			size, err := m.RepoReference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatcherRegistrationRecord_WatcherMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatcherRegistrationRecord_WatcherMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatcherRegistrationRecord_WatcherMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainReference != nil {
		{
			size, err := m.ChainReference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatcherRegistrationRecord_WASMBinary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatcherRegistrationRecord_WASMBinary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatcherRegistrationRecord_WASMBinary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.HashReference != nil {
		{
			size, err := m.HashReference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatcherRegistrationRecord_WASMBinaryMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatcherRegistrationRecord_WASMBinaryMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatcherRegistrationRecord_WASMBinaryMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecutionEngineVersion) > 0 {
		i -= len(m.ExecutionEngineVersion)
		copy(dAtA[i:], m.ExecutionEngineVersion)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.ExecutionEngineVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompilerVersion) > 0 {
		i -= len(m.CompilerVersion)
		copy(dAtA[i:], m.CompilerVersion)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.CompilerVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponderContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponderContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponderContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if m.WatcherRef != nil {
		{
			size, err := m.WatcherRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AuctionRef != nil {
		{
			size, err := m.AuctionRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ServiceProviderRef != nil {
		{
			size, err := m.ServiceProviderRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JSPackage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JSPackage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JSPackage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if m.JsPackageRef != nil {
		{
			size, err := m.JsPackageRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RepoReference != nil {
		{
			size, err := m.RepoReference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainRegistrationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainRegistrationRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainRegistrationRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GenesisHash != nil {
		{
			size, err := m.GenesisHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NetworkId) > 0 {
		i -= len(m.NetworkId)
		copy(dAtA[i:], m.NetworkId)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.NetworkId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IpldTypes) > 0 {
		for iNdEx := len(m.IpldTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IpldTypes[iNdEx])
			copy(dAtA[i:], m.IpldTypes[iNdEx])
			i = encodeVarintAttributes(dAtA, i, uint64(len(m.IpldTypes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAttributes(dAtA []byte, offset int, v uint64) int {
	offset -= sovAttributes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HashReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ref)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func (m *ServiceProviderRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondId)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.LaconicId)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	if m.X500 != nil {
		l = m.X500.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func (m *ServiceProviderRecord_X500) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommonName)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.OrganizationUnit)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.OrganizationName)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.LocalityName)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.StateName)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func (m *WebsiteRegistrationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	if m.RepoReference != nil {
		l = m.RepoReference.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	if m.BuildArtifactRef != nil {
		l = m.BuildArtifactRef.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	if m.TlsCertRef != nil {
		l = m.TlsCertRef.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func (m *GitRepository) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.RepoReference)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func (m *Binary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashReference != nil {
		l = m.HashReference.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.TargetedArch)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.RuntimeVersion)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	if m.RepoReference != nil {
		l = m.RepoReference.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func (m *DockerImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	if m.BinaryReference != nil {
		l = m.BinaryReference.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	if m.RepoReference != nil {
		l = m.RepoReference.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func (m *WatcherRegistrationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	if m.RepoReference != nil {
		l = m.RepoReference.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	if m.Wasm != nil {
		l = m.Wasm.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func (m *WatcherRegistrationRecord_WatcherMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	if m.ChainReference != nil {
		l = m.ChainReference.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func (m *WatcherRegistrationRecord_WASMBinary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashReference != nil {
		l = m.HashReference.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func (m *WatcherRegistrationRecord_WASMBinaryMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompilerVersion)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.ExecutionEngineVersion)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func (m *ResponderContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceProviderRef != nil {
		l = m.ServiceProviderRef.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	if m.AuctionRef != nil {
		l = m.AuctionRef.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	if m.WatcherRef != nil {
		l = m.WatcherRef.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func (m *JSPackage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RepoReference != nil {
		l = m.RepoReference.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	if m.JsPackageRef != nil {
		l = m.JsPackageRef.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func (m *ChainRegistrationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	if len(m.IpldTypes) > 0 {
		for _, s := range m.IpldTypes {
			l = len(s)
			n += 1 + l + sovAttributes(uint64(l))
		}
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.NetworkId)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	if m.GenesisHash != nil {
		l = m.GenesisHash.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func sovAttributes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAttributes(x uint64) (n int) {
	return sovAttributes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HashReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ref = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceProviderRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceProviderRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceProviderRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaconicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LaconicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field X500", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.X500 == nil {
				m.X500 = &ServiceProviderRecord_X500{}
			}
			if err := m.X500.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceProviderRecord_X500) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: X500: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: X500: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommonName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationUnit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebsiteRegistrationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebsiteRegistrationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebsiteRegistrationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RepoReference == nil {
				m.RepoReference = &HashReference{}
			}
			if err := m.RepoReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildArtifactRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuildArtifactRef == nil {
				m.BuildArtifactRef = &HashReference{}
			}
			if err := m.BuildArtifactRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCertRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsCertRef == nil {
				m.TlsCertRef = &HashReference{}
			}
			if err := m.TlsCertRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GitRepository) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GitRepository: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GitRepository: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoReference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepoReference = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Binary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Binary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Binary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HashReference == nil {
				m.HashReference = &HashReference{}
			}
			if err := m.HashReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetedArch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetedArch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuntimeVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RepoReference == nil {
				m.RepoReference = &HashReference{}
			}
			if err := m.RepoReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerImage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerImage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerImage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BinaryReference == nil {
				m.BinaryReference = &HashReference{}
			}
			if err := m.BinaryReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RepoReference == nil {
				m.RepoReference = &HashReference{}
			}
			if err := m.RepoReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatcherRegistrationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatcherRegistrationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatcherRegistrationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &WatcherRegistrationRecord_WatcherMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RepoReference == nil {
				m.RepoReference = &HashReference{}
			}
			if err := m.RepoReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wasm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Wasm == nil {
				m.Wasm = &WatcherRegistrationRecord_WASMBinary{}
			}
			if err := m.Wasm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatcherRegistrationRecord_WatcherMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatcherMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatcherMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainReference == nil {
				m.ChainReference = &HashReference{}
			}
			if err := m.ChainReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatcherRegistrationRecord_WASMBinary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WASMBinary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WASMBinary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HashReference == nil {
				m.HashReference = &HashReference{}
			}
			if err := m.HashReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &WatcherRegistrationRecord_WASMBinaryMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatcherRegistrationRecord_WASMBinaryMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WASMBinaryMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WASMBinaryMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompilerVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompilerVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionEngineVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionEngineVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponderContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponderContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponderContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceProviderRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceProviderRef == nil {
				m.ServiceProviderRef = &HashReference{}
			}
			if err := m.ServiceProviderRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuctionRef == nil {
				m.AuctionRef = &HashReference{}
			}
			if err := m.AuctionRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatcherRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WatcherRef == nil {
				m.WatcherRef = &HashReference{}
			}
			if err := m.WatcherRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JSPackage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JSPackage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JSPackage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RepoReference == nil {
				m.RepoReference = &HashReference{}
			}
			if err := m.RepoReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsPackageRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JsPackageRef == nil {
				m.JsPackageRef = &HashReference{}
			}
			if err := m.JsPackageRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainRegistrationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainRegistrationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainRegistrationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpldTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpldTypes = append(m.IpldTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GenesisHash == nil {
				m.GenesisHash = &HashReference{}
			}
			if err := m.GenesisHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAttributes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAttributes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAttributes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAttributes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAttributes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAttributes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAttributes = fmt.Errorf("proto: unexpected end of group")
)
