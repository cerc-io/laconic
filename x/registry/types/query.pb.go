// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vulcanize/registry/v1beta1/query.proto

package types

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for registry params
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for registry params
type QueryParamsResponse struct {
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

// QueryListRecordsRequest is request type for registry records list
type QueryListRecordsRequest struct {
	Attributes []*QueryListRecordsRequest_KeyValueInput `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
	All        bool                                     `protobuf:"varint,2,opt,name=all,proto3" json:"all,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListRecordsRequest) Reset()         { *m = QueryListRecordsRequest{} }
func (m *QueryListRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListRecordsRequest) ProtoMessage()    {}
func (*QueryListRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{2}
}
func (m *QueryListRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListRecordsRequest.Merge(m, src)
}
func (m *QueryListRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListRecordsRequest proto.InternalMessageInfo

func (m *QueryListRecordsRequest) GetAttributes() []*QueryListRecordsRequest_KeyValueInput {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *QueryListRecordsRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *QueryListRecordsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListRecordsRequest_LinkInput struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryListRecordsRequest_LinkInput) Reset()         { *m = QueryListRecordsRequest_LinkInput{} }
func (m *QueryListRecordsRequest_LinkInput) String() string { return proto.CompactTextString(m) }
func (*QueryListRecordsRequest_LinkInput) ProtoMessage()    {}
func (*QueryListRecordsRequest_LinkInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{2, 0}
}
func (m *QueryListRecordsRequest_LinkInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListRecordsRequest_LinkInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListRecordsRequest_LinkInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListRecordsRequest_LinkInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListRecordsRequest_LinkInput.Merge(m, src)
}
func (m *QueryListRecordsRequest_LinkInput) XXX_Size() int {
	return m.Size()
}
func (m *QueryListRecordsRequest_LinkInput) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListRecordsRequest_LinkInput.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListRecordsRequest_LinkInput proto.InternalMessageInfo

func (m *QueryListRecordsRequest_LinkInput) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// message ValueInput {
//   string type                   = 1;
//   string string                 = 2;
//   int64 int                     = 3;
//   double float                  = 4;
//   bool                boolean   = 5;
//   LinkInput      reference = 6;
//   repeated ValueInput values    = 7;
// }
type QueryListRecordsRequest_ArrayInput struct {
	Values []*QueryListRecordsRequest_ValueInput `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *QueryListRecordsRequest_ArrayInput) Reset()         { *m = QueryListRecordsRequest_ArrayInput{} }
func (m *QueryListRecordsRequest_ArrayInput) String() string { return proto.CompactTextString(m) }
func (*QueryListRecordsRequest_ArrayInput) ProtoMessage()    {}
func (*QueryListRecordsRequest_ArrayInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{2, 1}
}
func (m *QueryListRecordsRequest_ArrayInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListRecordsRequest_ArrayInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListRecordsRequest_ArrayInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListRecordsRequest_ArrayInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListRecordsRequest_ArrayInput.Merge(m, src)
}
func (m *QueryListRecordsRequest_ArrayInput) XXX_Size() int {
	return m.Size()
}
func (m *QueryListRecordsRequest_ArrayInput) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListRecordsRequest_ArrayInput.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListRecordsRequest_ArrayInput proto.InternalMessageInfo

func (m *QueryListRecordsRequest_ArrayInput) GetValues() []*QueryListRecordsRequest_ValueInput {
	if m != nil {
		return m.Values
	}
	return nil
}

type QueryListRecordsRequest_MapInput struct {
	Values map[string]*QueryListRecordsRequest_ValueInput `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryListRecordsRequest_MapInput) Reset()         { *m = QueryListRecordsRequest_MapInput{} }
func (m *QueryListRecordsRequest_MapInput) String() string { return proto.CompactTextString(m) }
func (*QueryListRecordsRequest_MapInput) ProtoMessage()    {}
func (*QueryListRecordsRequest_MapInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{2, 2}
}
func (m *QueryListRecordsRequest_MapInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListRecordsRequest_MapInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListRecordsRequest_MapInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListRecordsRequest_MapInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListRecordsRequest_MapInput.Merge(m, src)
}
func (m *QueryListRecordsRequest_MapInput) XXX_Size() int {
	return m.Size()
}
func (m *QueryListRecordsRequest_MapInput) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListRecordsRequest_MapInput.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListRecordsRequest_MapInput proto.InternalMessageInfo

func (m *QueryListRecordsRequest_MapInput) GetValues() map[string]*QueryListRecordsRequest_ValueInput {
	if m != nil {
		return m.Values
	}
	return nil
}

type QueryListRecordsRequest_ValueInput struct {
	// Types that are valid to be assigned to Value:
	//	*QueryListRecordsRequest_ValueInput_String_
	//	*QueryListRecordsRequest_ValueInput_Int
	//	*QueryListRecordsRequest_ValueInput_Float
	//	*QueryListRecordsRequest_ValueInput_Boolean
	//	*QueryListRecordsRequest_ValueInput_Link
	//	*QueryListRecordsRequest_ValueInput_Array
	//	*QueryListRecordsRequest_ValueInput_Map
	Value isQueryListRecordsRequest_ValueInput_Value `protobuf_oneof:"value"`
}

func (m *QueryListRecordsRequest_ValueInput) Reset()         { *m = QueryListRecordsRequest_ValueInput{} }
func (m *QueryListRecordsRequest_ValueInput) String() string { return proto.CompactTextString(m) }
func (*QueryListRecordsRequest_ValueInput) ProtoMessage()    {}
func (*QueryListRecordsRequest_ValueInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{2, 3}
}
func (m *QueryListRecordsRequest_ValueInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListRecordsRequest_ValueInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListRecordsRequest_ValueInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListRecordsRequest_ValueInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListRecordsRequest_ValueInput.Merge(m, src)
}
func (m *QueryListRecordsRequest_ValueInput) XXX_Size() int {
	return m.Size()
}
func (m *QueryListRecordsRequest_ValueInput) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListRecordsRequest_ValueInput.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListRecordsRequest_ValueInput proto.InternalMessageInfo

type isQueryListRecordsRequest_ValueInput_Value interface {
	isQueryListRecordsRequest_ValueInput_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueryListRecordsRequest_ValueInput_String_ struct {
	String_ string `protobuf:"bytes,1,opt,name=string,proto3,oneof" json:"string,omitempty"`
}
type QueryListRecordsRequest_ValueInput_Int struct {
	Int int64 `protobuf:"varint,2,opt,name=int,proto3,oneof" json:"int,omitempty"`
}
type QueryListRecordsRequest_ValueInput_Float struct {
	Float float64 `protobuf:"fixed64,3,opt,name=float,proto3,oneof" json:"float,omitempty"`
}
type QueryListRecordsRequest_ValueInput_Boolean struct {
	Boolean bool `protobuf:"varint,4,opt,name=boolean,proto3,oneof" json:"boolean,omitempty"`
}
type QueryListRecordsRequest_ValueInput_Link struct {
	Link string `protobuf:"bytes,5,opt,name=link,proto3,oneof" json:"link,omitempty"`
}
type QueryListRecordsRequest_ValueInput_Array struct {
	Array *QueryListRecordsRequest_ArrayInput `protobuf:"bytes,6,opt,name=array,proto3,oneof" json:"array,omitempty"`
}
type QueryListRecordsRequest_ValueInput_Map struct {
	Map *QueryListRecordsRequest_MapInput `protobuf:"bytes,7,opt,name=map,proto3,oneof" json:"map,omitempty"`
}

func (*QueryListRecordsRequest_ValueInput_String_) isQueryListRecordsRequest_ValueInput_Value() {}
func (*QueryListRecordsRequest_ValueInput_Int) isQueryListRecordsRequest_ValueInput_Value()     {}
func (*QueryListRecordsRequest_ValueInput_Float) isQueryListRecordsRequest_ValueInput_Value()   {}
func (*QueryListRecordsRequest_ValueInput_Boolean) isQueryListRecordsRequest_ValueInput_Value() {}
func (*QueryListRecordsRequest_ValueInput_Link) isQueryListRecordsRequest_ValueInput_Value()    {}
func (*QueryListRecordsRequest_ValueInput_Array) isQueryListRecordsRequest_ValueInput_Value()   {}
func (*QueryListRecordsRequest_ValueInput_Map) isQueryListRecordsRequest_ValueInput_Value()     {}

func (m *QueryListRecordsRequest_ValueInput) GetValue() isQueryListRecordsRequest_ValueInput_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *QueryListRecordsRequest_ValueInput) GetString_() string {
	if x, ok := m.GetValue().(*QueryListRecordsRequest_ValueInput_String_); ok {
		return x.String_
	}
	return ""
}

func (m *QueryListRecordsRequest_ValueInput) GetInt() int64 {
	if x, ok := m.GetValue().(*QueryListRecordsRequest_ValueInput_Int); ok {
		return x.Int
	}
	return 0
}

func (m *QueryListRecordsRequest_ValueInput) GetFloat() float64 {
	if x, ok := m.GetValue().(*QueryListRecordsRequest_ValueInput_Float); ok {
		return x.Float
	}
	return 0
}

func (m *QueryListRecordsRequest_ValueInput) GetBoolean() bool {
	if x, ok := m.GetValue().(*QueryListRecordsRequest_ValueInput_Boolean); ok {
		return x.Boolean
	}
	return false
}

func (m *QueryListRecordsRequest_ValueInput) GetLink() string {
	if x, ok := m.GetValue().(*QueryListRecordsRequest_ValueInput_Link); ok {
		return x.Link
	}
	return ""
}

func (m *QueryListRecordsRequest_ValueInput) GetArray() *QueryListRecordsRequest_ArrayInput {
	if x, ok := m.GetValue().(*QueryListRecordsRequest_ValueInput_Array); ok {
		return x.Array
	}
	return nil
}

func (m *QueryListRecordsRequest_ValueInput) GetMap() *QueryListRecordsRequest_MapInput {
	if x, ok := m.GetValue().(*QueryListRecordsRequest_ValueInput_Map); ok {
		return x.Map
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueryListRecordsRequest_ValueInput) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueryListRecordsRequest_ValueInput_String_)(nil),
		(*QueryListRecordsRequest_ValueInput_Int)(nil),
		(*QueryListRecordsRequest_ValueInput_Float)(nil),
		(*QueryListRecordsRequest_ValueInput_Boolean)(nil),
		(*QueryListRecordsRequest_ValueInput_Link)(nil),
		(*QueryListRecordsRequest_ValueInput_Array)(nil),
		(*QueryListRecordsRequest_ValueInput_Map)(nil),
	}
}

type QueryListRecordsRequest_KeyValueInput struct {
	Key   string                              `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *QueryListRecordsRequest_ValueInput `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryListRecordsRequest_KeyValueInput) Reset()         { *m = QueryListRecordsRequest_KeyValueInput{} }
func (m *QueryListRecordsRequest_KeyValueInput) String() string { return proto.CompactTextString(m) }
func (*QueryListRecordsRequest_KeyValueInput) ProtoMessage()    {}
func (*QueryListRecordsRequest_KeyValueInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{2, 4}
}
func (m *QueryListRecordsRequest_KeyValueInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListRecordsRequest_KeyValueInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListRecordsRequest_KeyValueInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListRecordsRequest_KeyValueInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListRecordsRequest_KeyValueInput.Merge(m, src)
}
func (m *QueryListRecordsRequest_KeyValueInput) XXX_Size() int {
	return m.Size()
}
func (m *QueryListRecordsRequest_KeyValueInput) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListRecordsRequest_KeyValueInput.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListRecordsRequest_KeyValueInput proto.InternalMessageInfo

func (m *QueryListRecordsRequest_KeyValueInput) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *QueryListRecordsRequest_KeyValueInput) GetValue() *QueryListRecordsRequest_ValueInput {
	if m != nil {
		return m.Value
	}
	return nil
}

// QueryListRecordsResponse is response type for registry records list
type QueryListRecordsResponse struct {
	Records []Record `protobuf:"bytes,1,rep,name=records,proto3" json:"records"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListRecordsResponse) Reset()         { *m = QueryListRecordsResponse{} }
func (m *QueryListRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListRecordsResponse) ProtoMessage()    {}
func (*QueryListRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{3}
}
func (m *QueryListRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListRecordsResponse.Merge(m, src)
}
func (m *QueryListRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListRecordsResponse proto.InternalMessageInfo

func (m *QueryListRecordsResponse) GetRecords() []Record {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *QueryListRecordsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRecordByIDRequest is request type for registry records by id
type QueryRecordByIDRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryRecordByIDRequest) Reset()         { *m = QueryRecordByIDRequest{} }
func (m *QueryRecordByIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRecordByIDRequest) ProtoMessage()    {}
func (*QueryRecordByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{4}
}
func (m *QueryRecordByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRecordByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRecordByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRecordByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRecordByIDRequest.Merge(m, src)
}
func (m *QueryRecordByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRecordByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRecordByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRecordByIDRequest proto.InternalMessageInfo

func (m *QueryRecordByIDRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryRecordByIDResponse is response type for registry records by id
type QueryRecordByIDResponse struct {
	Record Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record"`
}

func (m *QueryRecordByIDResponse) Reset()         { *m = QueryRecordByIDResponse{} }
func (m *QueryRecordByIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRecordByIDResponse) ProtoMessage()    {}
func (*QueryRecordByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{5}
}
func (m *QueryRecordByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRecordByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRecordByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRecordByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRecordByIDResponse.Merge(m, src)
}
func (m *QueryRecordByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRecordByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRecordByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRecordByIDResponse proto.InternalMessageInfo

func (m *QueryRecordByIDResponse) GetRecord() Record {
	if m != nil {
		return m.Record
	}
	return Record{}
}

// QueryRecordByBondIdRequest is request type for get the records by bond-id
type QueryRecordByBondIDRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRecordByBondIDRequest) Reset()         { *m = QueryRecordByBondIDRequest{} }
func (m *QueryRecordByBondIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRecordByBondIDRequest) ProtoMessage()    {}
func (*QueryRecordByBondIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{6}
}
func (m *QueryRecordByBondIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRecordByBondIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRecordByBondIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRecordByBondIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRecordByBondIDRequest.Merge(m, src)
}
func (m *QueryRecordByBondIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRecordByBondIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRecordByBondIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRecordByBondIDRequest proto.InternalMessageInfo

func (m *QueryRecordByBondIDRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QueryRecordByBondIDRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRecordByBondIdResponse is response type for records list by bond-id
type QueryRecordByBondIDResponse struct {
	Records []Record `protobuf:"bytes,1,rep,name=records,proto3" json:"records"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRecordByBondIDResponse) Reset()         { *m = QueryRecordByBondIDResponse{} }
func (m *QueryRecordByBondIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRecordByBondIDResponse) ProtoMessage()    {}
func (*QueryRecordByBondIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{7}
}
func (m *QueryRecordByBondIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRecordByBondIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRecordByBondIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRecordByBondIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRecordByBondIDResponse.Merge(m, src)
}
func (m *QueryRecordByBondIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRecordByBondIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRecordByBondIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRecordByBondIDResponse proto.InternalMessageInfo

func (m *QueryRecordByBondIDResponse) GetRecords() []Record {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *QueryRecordByBondIDResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// GetRegistryModuleBalanceRequest is request type for registry module accounts balance
type GetRegistryModuleBalanceRequest struct {
}

func (m *GetRegistryModuleBalanceRequest) Reset()         { *m = GetRegistryModuleBalanceRequest{} }
func (m *GetRegistryModuleBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*GetRegistryModuleBalanceRequest) ProtoMessage()    {}
func (*GetRegistryModuleBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{8}
}
func (m *GetRegistryModuleBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRegistryModuleBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRegistryModuleBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRegistryModuleBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRegistryModuleBalanceRequest.Merge(m, src)
}
func (m *GetRegistryModuleBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRegistryModuleBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRegistryModuleBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRegistryModuleBalanceRequest proto.InternalMessageInfo

// GetRegistryModuleBalanceResponse is response type for registry module accounts balance
type GetRegistryModuleBalanceResponse struct {
	Balances []*AccountBalance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (m *GetRegistryModuleBalanceResponse) Reset()         { *m = GetRegistryModuleBalanceResponse{} }
func (m *GetRegistryModuleBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*GetRegistryModuleBalanceResponse) ProtoMessage()    {}
func (*GetRegistryModuleBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{9}
}
func (m *GetRegistryModuleBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRegistryModuleBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRegistryModuleBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRegistryModuleBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRegistryModuleBalanceResponse.Merge(m, src)
}
func (m *GetRegistryModuleBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRegistryModuleBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRegistryModuleBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRegistryModuleBalanceResponse proto.InternalMessageInfo

func (m *GetRegistryModuleBalanceResponse) GetBalances() []*AccountBalance {
	if m != nil {
		return m.Balances
	}
	return nil
}

// AccountBalance is registry module account balance
type AccountBalance struct {
	AccountName string                                   `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty" json:"accountName" yaml:"accountName"`
	Balance     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=balance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"balance" json:"balance" yaml:"balance"`
}

func (m *AccountBalance) Reset()         { *m = AccountBalance{} }
func (m *AccountBalance) String() string { return proto.CompactTextString(m) }
func (*AccountBalance) ProtoMessage()    {}
func (*AccountBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{10}
}
func (m *AccountBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountBalance.Merge(m, src)
}
func (m *AccountBalance) XXX_Size() int {
	return m.Size()
}
func (m *AccountBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountBalance.DiscardUnknown(m)
}

var xxx_messageInfo_AccountBalance proto.InternalMessageInfo

func (m *AccountBalance) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *AccountBalance) GetBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Balance
	}
	return nil
}

// QueryListNameRecordsRequest is request type for registry names records
type QueryListNameRecordsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListNameRecordsRequest) Reset()         { *m = QueryListNameRecordsRequest{} }
func (m *QueryListNameRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListNameRecordsRequest) ProtoMessage()    {}
func (*QueryListNameRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{11}
}
func (m *QueryListNameRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListNameRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListNameRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListNameRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListNameRecordsRequest.Merge(m, src)
}
func (m *QueryListNameRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListNameRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListNameRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListNameRecordsRequest proto.InternalMessageInfo

func (m *QueryListNameRecordsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryListNameRecordsResponse is response type for registry names records
type QueryListNameRecordsResponse struct {
	Names []NameEntry `protobuf:"bytes,1,rep,name=names,proto3" json:"names"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListNameRecordsResponse) Reset()         { *m = QueryListNameRecordsResponse{} }
func (m *QueryListNameRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListNameRecordsResponse) ProtoMessage()    {}
func (*QueryListNameRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{12}
}
func (m *QueryListNameRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListNameRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListNameRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListNameRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListNameRecordsResponse.Merge(m, src)
}
func (m *QueryListNameRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListNameRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListNameRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListNameRecordsResponse proto.InternalMessageInfo

func (m *QueryListNameRecordsResponse) GetNames() []NameEntry {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *QueryListNameRecordsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryWhoisRequest is request type for Get NameAuthority
type QueryWhoisRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryWhoisRequest) Reset()         { *m = QueryWhoisRequest{} }
func (m *QueryWhoisRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWhoisRequest) ProtoMessage()    {}
func (*QueryWhoisRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{13}
}
func (m *QueryWhoisRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhoisRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhoisRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhoisRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhoisRequest.Merge(m, src)
}
func (m *QueryWhoisRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhoisRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhoisRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhoisRequest proto.InternalMessageInfo

func (m *QueryWhoisRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// QueryWhoisResponse is response type for whois request
type QueryWhoisResponse struct {
	NameAuthority NameAuthority `protobuf:"bytes,1,opt,name=name_authority,json=nameAuthority,proto3" json:"name_authority" json:"nameAuthority" yaml:"nameAuthority"`
}

func (m *QueryWhoisResponse) Reset()         { *m = QueryWhoisResponse{} }
func (m *QueryWhoisResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWhoisResponse) ProtoMessage()    {}
func (*QueryWhoisResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{14}
}
func (m *QueryWhoisResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhoisResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhoisResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhoisResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhoisResponse.Merge(m, src)
}
func (m *QueryWhoisResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhoisResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhoisResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhoisResponse proto.InternalMessageInfo

func (m *QueryWhoisResponse) GetNameAuthority() NameAuthority {
	if m != nil {
		return m.NameAuthority
	}
	return NameAuthority{}
}

// QueryLookupCrn is request type for LookupCrn
type QueryLookupCrn struct {
	Crn string `protobuf:"bytes,1,opt,name=crn,proto3" json:"crn,omitempty"`
}

func (m *QueryLookupCrn) Reset()         { *m = QueryLookupCrn{} }
func (m *QueryLookupCrn) String() string { return proto.CompactTextString(m) }
func (*QueryLookupCrn) ProtoMessage()    {}
func (*QueryLookupCrn) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{15}
}
func (m *QueryLookupCrn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLookupCrn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLookupCrn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLookupCrn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLookupCrn.Merge(m, src)
}
func (m *QueryLookupCrn) XXX_Size() int {
	return m.Size()
}
func (m *QueryLookupCrn) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLookupCrn.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLookupCrn proto.InternalMessageInfo

func (m *QueryLookupCrn) GetCrn() string {
	if m != nil {
		return m.Crn
	}
	return ""
}

// QueryLookupCrnResponse is response type for QueryLookupCrn
type QueryLookupCrnResponse struct {
	Name *NameRecord `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryLookupCrnResponse) Reset()         { *m = QueryLookupCrnResponse{} }
func (m *QueryLookupCrnResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLookupCrnResponse) ProtoMessage()    {}
func (*QueryLookupCrnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{16}
}
func (m *QueryLookupCrnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLookupCrnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLookupCrnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLookupCrnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLookupCrnResponse.Merge(m, src)
}
func (m *QueryLookupCrnResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLookupCrnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLookupCrnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLookupCrnResponse proto.InternalMessageInfo

func (m *QueryLookupCrnResponse) GetName() *NameRecord {
	if m != nil {
		return m.Name
	}
	return nil
}

// QueryResolveCrn is request type for ResolveCrn
type QueryResolveCrn struct {
	Crn string `protobuf:"bytes,1,opt,name=crn,proto3" json:"crn,omitempty"`
}

func (m *QueryResolveCrn) Reset()         { *m = QueryResolveCrn{} }
func (m *QueryResolveCrn) String() string { return proto.CompactTextString(m) }
func (*QueryResolveCrn) ProtoMessage()    {}
func (*QueryResolveCrn) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{17}
}
func (m *QueryResolveCrn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResolveCrn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResolveCrn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResolveCrn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResolveCrn.Merge(m, src)
}
func (m *QueryResolveCrn) XXX_Size() int {
	return m.Size()
}
func (m *QueryResolveCrn) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResolveCrn.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResolveCrn proto.InternalMessageInfo

func (m *QueryResolveCrn) GetCrn() string {
	if m != nil {
		return m.Crn
	}
	return ""
}

// QueryResolveCrnResponse is response type for QueryResolveCrn
type QueryResolveCrnResponse struct {
	Record *Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *QueryResolveCrnResponse) Reset()         { *m = QueryResolveCrnResponse{} }
func (m *QueryResolveCrnResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResolveCrnResponse) ProtoMessage()    {}
func (*QueryResolveCrnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{18}
}
func (m *QueryResolveCrnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResolveCrnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResolveCrnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResolveCrnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResolveCrnResponse.Merge(m, src)
}
func (m *QueryResolveCrnResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryResolveCrnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResolveCrnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResolveCrnResponse proto.InternalMessageInfo

func (m *QueryResolveCrnResponse) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

// QueryGetRecordExpiryQueue
type QueryGetRecordExpiryQueue struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetRecordExpiryQueue) Reset()         { *m = QueryGetRecordExpiryQueue{} }
func (m *QueryGetRecordExpiryQueue) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecordExpiryQueue) ProtoMessage()    {}
func (*QueryGetRecordExpiryQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{19}
}
func (m *QueryGetRecordExpiryQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecordExpiryQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecordExpiryQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecordExpiryQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecordExpiryQueue.Merge(m, src)
}
func (m *QueryGetRecordExpiryQueue) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecordExpiryQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecordExpiryQueue.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecordExpiryQueue proto.InternalMessageInfo

func (m *QueryGetRecordExpiryQueue) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetRecordExpiryQueueResponse
type QueryGetRecordExpiryQueueResponse struct {
	Records []*ExpiryQueueRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetRecordExpiryQueueResponse) Reset()         { *m = QueryGetRecordExpiryQueueResponse{} }
func (m *QueryGetRecordExpiryQueueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecordExpiryQueueResponse) ProtoMessage()    {}
func (*QueryGetRecordExpiryQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{20}
}
func (m *QueryGetRecordExpiryQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecordExpiryQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecordExpiryQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecordExpiryQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecordExpiryQueueResponse.Merge(m, src)
}
func (m *QueryGetRecordExpiryQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecordExpiryQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecordExpiryQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecordExpiryQueueResponse proto.InternalMessageInfo

func (m *QueryGetRecordExpiryQueueResponse) GetRecords() []*ExpiryQueueRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *QueryGetRecordExpiryQueueResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// ExpiryQueueRecord
type ExpiryQueueRecord struct {
	Id    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (m *ExpiryQueueRecord) Reset()         { *m = ExpiryQueueRecord{} }
func (m *ExpiryQueueRecord) String() string { return proto.CompactTextString(m) }
func (*ExpiryQueueRecord) ProtoMessage()    {}
func (*ExpiryQueueRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{21}
}
func (m *ExpiryQueueRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpiryQueueRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpiryQueueRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExpiryQueueRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpiryQueueRecord.Merge(m, src)
}
func (m *ExpiryQueueRecord) XXX_Size() int {
	return m.Size()
}
func (m *ExpiryQueueRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpiryQueueRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ExpiryQueueRecord proto.InternalMessageInfo

func (m *ExpiryQueueRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ExpiryQueueRecord) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

// QueryGetAuthorityExpiryQueue
type QueryGetAuthorityExpiryQueue struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAuthorityExpiryQueue) Reset()         { *m = QueryGetAuthorityExpiryQueue{} }
func (m *QueryGetAuthorityExpiryQueue) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuthorityExpiryQueue) ProtoMessage()    {}
func (*QueryGetAuthorityExpiryQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{22}
}
func (m *QueryGetAuthorityExpiryQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuthorityExpiryQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuthorityExpiryQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuthorityExpiryQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuthorityExpiryQueue.Merge(m, src)
}
func (m *QueryGetAuthorityExpiryQueue) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuthorityExpiryQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuthorityExpiryQueue.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuthorityExpiryQueue proto.InternalMessageInfo

func (m *QueryGetAuthorityExpiryQueue) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetAuthorityExpiryQueueResponse
type QueryGetAuthorityExpiryQueueResponse struct {
	Authorities []*ExpiryQueueRecord `protobuf:"bytes,1,rep,name=authorities,proto3" json:"authorities,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAuthorityExpiryQueueResponse) Reset()         { *m = QueryGetAuthorityExpiryQueueResponse{} }
func (m *QueryGetAuthorityExpiryQueueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuthorityExpiryQueueResponse) ProtoMessage()    {}
func (*QueryGetAuthorityExpiryQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfadc1ce52446f26, []int{23}
}
func (m *QueryGetAuthorityExpiryQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuthorityExpiryQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuthorityExpiryQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuthorityExpiryQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuthorityExpiryQueueResponse.Merge(m, src)
}
func (m *QueryGetAuthorityExpiryQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuthorityExpiryQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuthorityExpiryQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuthorityExpiryQueueResponse proto.InternalMessageInfo

func (m *QueryGetAuthorityExpiryQueueResponse) GetAuthorities() []*ExpiryQueueRecord {
	if m != nil {
		return m.Authorities
	}
	return nil
}

func (m *QueryGetAuthorityExpiryQueueResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "vulcanize.registry.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "vulcanize.registry.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryListRecordsRequest)(nil), "vulcanize.registry.v1beta1.QueryListRecordsRequest")
	proto.RegisterType((*QueryListRecordsRequest_LinkInput)(nil), "vulcanize.registry.v1beta1.QueryListRecordsRequest.LinkInput")
	proto.RegisterType((*QueryListRecordsRequest_ArrayInput)(nil), "vulcanize.registry.v1beta1.QueryListRecordsRequest.ArrayInput")
	proto.RegisterType((*QueryListRecordsRequest_MapInput)(nil), "vulcanize.registry.v1beta1.QueryListRecordsRequest.MapInput")
	proto.RegisterMapType((map[string]*QueryListRecordsRequest_ValueInput)(nil), "vulcanize.registry.v1beta1.QueryListRecordsRequest.MapInput.ValuesEntry")
	proto.RegisterType((*QueryListRecordsRequest_ValueInput)(nil), "vulcanize.registry.v1beta1.QueryListRecordsRequest.ValueInput")
	proto.RegisterType((*QueryListRecordsRequest_KeyValueInput)(nil), "vulcanize.registry.v1beta1.QueryListRecordsRequest.KeyValueInput")
	proto.RegisterType((*QueryListRecordsResponse)(nil), "vulcanize.registry.v1beta1.QueryListRecordsResponse")
	proto.RegisterType((*QueryRecordByIDRequest)(nil), "vulcanize.registry.v1beta1.QueryRecordByIDRequest")
	proto.RegisterType((*QueryRecordByIDResponse)(nil), "vulcanize.registry.v1beta1.QueryRecordByIDResponse")
	proto.RegisterType((*QueryRecordByBondIDRequest)(nil), "vulcanize.registry.v1beta1.QueryRecordByBondIDRequest")
	proto.RegisterType((*QueryRecordByBondIDResponse)(nil), "vulcanize.registry.v1beta1.QueryRecordByBondIDResponse")
	proto.RegisterType((*GetRegistryModuleBalanceRequest)(nil), "vulcanize.registry.v1beta1.GetRegistryModuleBalanceRequest")
	proto.RegisterType((*GetRegistryModuleBalanceResponse)(nil), "vulcanize.registry.v1beta1.GetRegistryModuleBalanceResponse")
	proto.RegisterType((*AccountBalance)(nil), "vulcanize.registry.v1beta1.AccountBalance")
	proto.RegisterType((*QueryListNameRecordsRequest)(nil), "vulcanize.registry.v1beta1.QueryListNameRecordsRequest")
	proto.RegisterType((*QueryListNameRecordsResponse)(nil), "vulcanize.registry.v1beta1.QueryListNameRecordsResponse")
	proto.RegisterType((*QueryWhoisRequest)(nil), "vulcanize.registry.v1beta1.QueryWhoisRequest")
	proto.RegisterType((*QueryWhoisResponse)(nil), "vulcanize.registry.v1beta1.QueryWhoisResponse")
	proto.RegisterType((*QueryLookupCrn)(nil), "vulcanize.registry.v1beta1.QueryLookupCrn")
	proto.RegisterType((*QueryLookupCrnResponse)(nil), "vulcanize.registry.v1beta1.QueryLookupCrnResponse")
	proto.RegisterType((*QueryResolveCrn)(nil), "vulcanize.registry.v1beta1.QueryResolveCrn")
	proto.RegisterType((*QueryResolveCrnResponse)(nil), "vulcanize.registry.v1beta1.QueryResolveCrnResponse")
	proto.RegisterType((*QueryGetRecordExpiryQueue)(nil), "vulcanize.registry.v1beta1.QueryGetRecordExpiryQueue")
	proto.RegisterType((*QueryGetRecordExpiryQueueResponse)(nil), "vulcanize.registry.v1beta1.QueryGetRecordExpiryQueueResponse")
	proto.RegisterType((*ExpiryQueueRecord)(nil), "vulcanize.registry.v1beta1.ExpiryQueueRecord")
	proto.RegisterType((*QueryGetAuthorityExpiryQueue)(nil), "vulcanize.registry.v1beta1.QueryGetAuthorityExpiryQueue")
	proto.RegisterType((*QueryGetAuthorityExpiryQueueResponse)(nil), "vulcanize.registry.v1beta1.QueryGetAuthorityExpiryQueueResponse")
}

func init() {
	proto.RegisterFile("vulcanize/registry/v1beta1/query.proto", fileDescriptor_dfadc1ce52446f26)
}

var fileDescriptor_dfadc1ce52446f26 = []byte{
	// 1483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4f, 0x6c, 0x13, 0xc7,
	0x1a, 0xf7, 0xd8, 0xb1, 0x43, 0xbe, 0x3c, 0xc2, 0x63, 0x5e, 0x04, 0x66, 0xe1, 0x39, 0x61, 0xf9,
	0xe7, 0x04, 0xec, 0x7d, 0x49, 0xe0, 0x41, 0x81, 0x56, 0xc4, 0x14, 0x12, 0x54, 0x68, 0xc9, 0x8a,
	0x52, 0xa9, 0x3d, 0xd0, 0xf1, 0x7a, 0x30, 0x4b, 0xd6, 0x3b, 0x66, 0x77, 0x1d, 0x70, 0x11, 0x97,
	0x56, 0xea, 0xb1, 0xaa, 0x54, 0x55, 0xad, 0xda, 0x73, 0x5b, 0x89, 0x4b, 0x4f, 0x55, 0x8f, 0xfd,
	0x73, 0x42, 0xea, 0x05, 0xa9, 0x97, 0x9e, 0x68, 0x05, 0x95, 0xb8, 0x73, 0xe8, 0xb9, 0xda, 0x99,
	0xd9, 0xf5, 0xae, 0x13, 0xff, 0x25, 0xad, 0x7a, 0xf2, 0xce, 0xcc, 0xf7, 0xe7, 0xf7, 0xfb, 0xbe,
	0x99, 0x6f, 0xbe, 0x31, 0x1c, 0x5c, 0x6b, 0x58, 0x06, 0xb1, 0xcd, 0x77, 0xa8, 0xe6, 0xd0, 0xaa,
	0xe9, 0x7a, 0x4e, 0x53, 0x5b, 0x9b, 0x2b, 0x53, 0x8f, 0xcc, 0x69, 0xb7, 0x1a, 0xd4, 0x69, 0x16,
	0xeb, 0x0e, 0xf3, 0x18, 0x56, 0x42, 0xb9, 0x62, 0x20, 0x57, 0x94, 0x72, 0xca, 0x4c, 0x17, 0x1b,
	0xa1, 0x30, 0x37, 0xa3, 0xec, 0xa9, 0x32, 0x56, 0xb5, 0xa8, 0x46, 0xea, 0xa6, 0x46, 0x6c, 0x9b,
	0x79, 0xc4, 0x33, 0x99, 0xed, 0xca, 0xd5, 0x59, 0x83, 0xb9, 0x35, 0xe6, 0x6a, 0x65, 0xe2, 0x52,
	0xe1, 0x3d, 0xb4, 0x53, 0x27, 0x55, 0xd3, 0xe6, 0xc2, 0x52, 0x76, 0xb2, 0xca, 0xaa, 0x8c, 0x7f,
	0x6a, 0xfe, 0x97, 0x9c, 0xcd, 0x45, 0x2d, 0x04, 0xba, 0x06, 0x33, 0xa5, 0x96, 0x3a, 0x09, 0x78,
	0xc5, 0xb7, 0x7b, 0x99, 0x38, 0xa4, 0xe6, 0xea, 0xf4, 0x56, 0x83, 0xba, 0x9e, 0xba, 0x02, 0xff,
	0x89, 0xcd, 0xba, 0x75, 0x66, 0xbb, 0x14, 0x9f, 0x84, 0x4c, 0x9d, 0xcf, 0x64, 0xd1, 0x34, 0xca,
	0x8f, 0xcf, 0xab, 0xc5, 0xce, 0x41, 0x28, 0x4a, 0x5d, 0xa9, 0xa1, 0xfe, 0x31, 0x0a, 0x3b, 0xb9,
	0xcd, 0x8b, 0xa6, 0xeb, 0xe9, 0xd4, 0x60, 0x4e, 0x25, 0x70, 0x87, 0x09, 0x00, 0xf1, 0x3c, 0xc7,
	0x2c, 0x37, 0x3c, 0xea, 0xdb, 0x4e, 0xe5, 0xc7, 0xe7, 0x17, 0xbb, 0xd9, 0xee, 0x60, 0xa8, 0xf8,
	0x0a, 0x6d, 0x5e, 0x25, 0x56, 0x83, 0x5e, 0xb0, 0xeb, 0x0d, 0x4f, 0x8f, 0x18, 0xc5, 0xff, 0x86,
	0x14, 0xb1, 0xac, 0x6c, 0x72, 0x1a, 0xe5, 0xb7, 0xe8, 0xfe, 0x27, 0x3e, 0x0f, 0xd0, 0x8a, 0x61,
	0x36, 0xc5, 0x09, 0x1d, 0x2c, 0x8a, 0x70, 0x15, 0xfd, 0x70, 0x15, 0x45, 0xba, 0x5b, 0x7c, 0xaa,
	0x54, 0xfa, 0xd1, 0x23, 0x9a, 0xca, 0x6e, 0x18, 0xbb, 0x68, 0xda, 0xab, 0xdc, 0x25, 0x9e, 0x80,
	0xa4, 0x59, 0xe1, 0xd1, 0x19, 0xd3, 0x93, 0x66, 0x45, 0xa9, 0x00, 0x2c, 0x3a, 0x0e, 0x69, 0x8a,
	0xd5, 0xab, 0x90, 0x59, 0xf3, 0xe1, 0x05, 0x1c, 0x5f, 0x1a, 0x86, 0x63, 0x84, 0xa0, 0xb4, 0xa6,
	0x3c, 0x45, 0xb0, 0xe5, 0x12, 0xa9, 0x0b, 0x27, 0x6f, 0xb7, 0x39, 0x59, 0x1e, 0xc6, 0x49, 0x60,
	0x4d, 0x78, 0x73, 0xcf, 0xd9, 0x9e, 0xd3, 0x0c, 0xdd, 0x35, 0x61, 0x3c, 0x32, 0xed, 0x87, 0x76,
	0x95, 0x36, 0x25, 0x69, 0xff, 0x13, 0x5f, 0x81, 0x34, 0x17, 0xe5, 0xe1, 0x7e, 0x7e, 0x9a, 0xc2,
	0xd8, 0xc9, 0xe4, 0x09, 0xa4, 0x7c, 0x9b, 0x04, 0x68, 0xad, 0xe0, 0x2c, 0x64, 0x5c, 0xcf, 0x31,
	0xed, 0xaa, 0xf0, 0xbe, 0x9c, 0xd0, 0xe5, 0x18, 0x63, 0x48, 0x99, 0xb6, 0xc7, 0x01, 0xa4, 0x96,
	0x13, 0xba, 0x3f, 0xc0, 0x3b, 0x20, 0x7d, 0xdd, 0x62, 0xc4, 0xe3, 0xc9, 0x46, 0xcb, 0x09, 0x5d,
	0x0c, 0xb1, 0x02, 0xa3, 0x65, 0xc6, 0x2c, 0x4a, 0xec, 0xec, 0x88, 0xbf, 0x3f, 0x96, 0x13, 0x7a,
	0x30, 0x81, 0x27, 0x61, 0xc4, 0x32, 0xed, 0xd5, 0x6c, 0x5a, 0xda, 0xe7, 0x23, 0x7c, 0x15, 0xd2,
	0xc4, 0x4f, 0x6b, 0x36, 0x33, 0x3c, 0xc1, 0xd6, 0xbe, 0xf0, 0x91, 0x70, 0x73, 0xf8, 0x32, 0xa4,
	0x6a, 0xa4, 0x9e, 0x1d, 0xe5, 0x56, 0x4f, 0x3f, 0x4f, 0xe2, 0x7c, 0xce, 0x35, 0x52, 0x2f, 0x8d,
	0xca, 0x54, 0x28, 0xb7, 0x61, 0x6b, 0xec, 0x74, 0xfc, 0x5d, 0x69, 0x53, 0xbf, 0x42, 0x90, 0x5d,
	0x2f, 0x2d, 0x2b, 0x4a, 0x09, 0x46, 0x1d, 0x31, 0x25, 0x77, 0x6b, 0xd7, 0x92, 0x22, 0xb4, 0x4b,
	0x23, 0x0f, 0x1e, 0x4d, 0x25, 0xf4, 0x40, 0x11, 0x2f, 0xc5, 0x0e, 0xb2, 0xc0, 0x7e, 0xa8, 0xe7,
	0x41, 0x16, 0x00, 0xa2, 0x27, 0x59, 0xcd, 0xc3, 0x0e, 0x0e, 0x54, 0xba, 0x69, 0x5e, 0x78, 0x39,
	0x28, 0x50, 0x6d, 0xc7, 0x5a, 0x7d, 0x4b, 0xd6, 0xb2, 0xa8, 0xa4, 0x64, 0x74, 0x06, 0x32, 0x02,
	0x58, 0x3f, 0x35, 0x32, 0x46, 0x48, 0xea, 0xa9, 0x1e, 0x28, 0x31, 0xe3, 0x25, 0x66, 0x57, 0x3a,
	0x42, 0x69, 0x2b, 0x63, 0xc9, 0x61, 0xcb, 0x98, 0x7a, 0x1f, 0xc1, 0xee, 0x0d, 0xdd, 0xfe, 0x13,
	0x33, 0xb5, 0x17, 0xa6, 0x96, 0xa8, 0xa7, 0x4b, 0xaf, 0x97, 0x58, 0xa5, 0x61, 0xd1, 0x12, 0xb1,
	0x88, 0x6d, 0x04, 0xdc, 0xd4, 0x9b, 0x30, 0xdd, 0x59, 0x44, 0x72, 0x3a, 0x0f, 0x5b, 0xca, 0x62,
	0x2a, 0x20, 0x35, 0xdb, 0x8d, 0xd4, 0xa2, 0x61, 0xb0, 0x86, 0xed, 0x05, 0x56, 0x42, 0x5d, 0xf5,
	0x29, 0x82, 0x89, 0xf8, 0x22, 0xbe, 0x08, 0xff, 0x22, 0x62, 0xe6, 0x9a, 0x4d, 0x6a, 0x54, 0x24,
	0xac, 0x34, 0xf3, 0xec, 0xd1, 0xd4, 0x81, 0x9b, 0x2e, 0xb3, 0x4f, 0xaa, 0x72, 0xf5, 0x55, 0x52,
	0xa3, 0xea, 0x74, 0x93, 0xd4, 0xac, 0xf8, 0x94, 0x3e, 0x1e, 0x19, 0xe1, 0xf7, 0x11, 0x8c, 0x4a,
	0x6f, 0xd9, 0x14, 0x07, 0xba, 0x2b, 0x16, 0xb6, 0x00, 0xe1, 0x59, 0x66, 0xda, 0xa5, 0x15, 0x3f,
	0xe8, 0xcf, 0x1e, 0x4d, 0xfd, 0x57, 0x38, 0x92, 0x7a, 0x81, 0x93, 0x60, 0x78, 0xff, 0xd7, 0xa9,
	0x7c, 0xd5, 0xf4, 0x6e, 0x34, 0xca, 0x45, 0x83, 0xd5, 0x34, 0xd9, 0x26, 0x88, 0x9f, 0x82, 0x5b,
	0x59, 0xd5, 0xbc, 0x66, 0x9d, 0xba, 0xdc, 0xa2, 0xab, 0x07, 0xce, 0x55, 0x2a, 0x37, 0x89, 0x7f,
	0x96, 0x7d, 0x64, 0x6d, 0x17, 0x79, 0x7c, 0x33, 0xa2, 0xe7, 0xd9, 0x8c, 0x7b, 0x36, 0xf6, 0x23,
	0x33, 0xb7, 0x08, 0x69, 0x3f, 0xac, 0x41, 0xda, 0x0e, 0x74, 0x4b, 0x9b, 0xaf, 0xcf, 0x6f, 0x2a,
	0xb9, 0x1d, 0x85, 0xe6, 0xe6, 0x6d, 0xc6, 0x43, 0xb0, 0x9d, 0x63, 0x7d, 0xe3, 0x06, 0x33, 0xc3,
	0x48, 0x60, 0x18, 0x69, 0xe5, 0x5d, 0xe7, 0xdf, 0xea, 0x67, 0x48, 0x36, 0x5b, 0x52, 0x52, 0x72,
	0x79, 0x0f, 0xc1, 0x84, 0xbf, 0x7e, 0x8d, 0x34, 0xbc, 0x1b, 0xcc, 0x31, 0xbd, 0xa6, 0x8c, 0xdc,
	0x4c, 0x2f, 0x56, 0x8b, 0x81, 0x42, 0x69, 0x4e, 0xe6, 0x7c, 0x46, 0xe4, 0xdc, 0x8e, 0x2e, 0x06,
	0x99, 0x8f, 0x4f, 0xea, 0x5b, 0xe3, 0x63, 0x15, 0x26, 0x44, 0xc4, 0x19, 0x5b, 0x6d, 0xd4, 0xcf,
	0x3a, 0xb6, 0x7f, 0x41, 0x18, 0x8e, 0x1d, 0x5c, 0x10, 0x86, 0x63, 0xab, 0x57, 0x64, 0x81, 0x0c,
	0x65, 0x22, 0x9d, 0x61, 0x8b, 0xae, 0x9f, 0xf2, 0x1e, 0xc0, 0x45, 0x3a, 0x65, 0x58, 0xf6, 0xc1,
	0x36, 0x59, 0x78, 0x5c, 0x66, 0xad, 0xd1, 0x8d, 0x5d, 0xbf, 0x1e, 0x56, 0xdc, 0x40, 0x28, 0xda,
	0x95, 0x0e, 0x5a, 0x71, 0xc3, 0x5a, 0x6b, 0xc0, 0x2e, 0x6e, 0x96, 0x97, 0x0a, 0x7f, 0xe6, 0xdc,
	0x9d, 0xba, 0xe9, 0x34, 0x57, 0x1a, 0xb4, 0x41, 0x37, 0x6d, 0x37, 0x7f, 0x83, 0x60, 0x6f, 0x47,
	0x2f, 0x21, 0x8d, 0xa5, 0xf6, 0x02, 0x5b, 0xe8, 0xc6, 0x23, 0x66, 0x81, 0x53, 0xda, 0xfc, 0x2a,
	0xfb, 0x02, 0x6c, 0x5f, 0xe7, 0x66, 0xdd, 0xfd, 0x33, 0xd9, 0x6a, 0x1a, 0x52, 0xf9, 0xb1, 0xe0,
	0xd2, 0xbf, 0x2e, 0xcf, 0xef, 0x12, 0xf5, 0xc2, 0x2d, 0xf6, 0x57, 0x84, 0xf6, 0x7b, 0x04, 0xfb,
	0xbb, 0x39, 0x0a, 0xa3, 0xfb, 0x1a, 0x8c, 0x07, 0xc7, 0xcb, 0xa4, 0x43, 0x46, 0x38, 0x6a, 0x61,
	0xd3, 0xa2, 0x3c, 0xff, 0xc1, 0x36, 0x48, 0x73, 0x0a, 0xf8, 0x63, 0x04, 0x19, 0xf1, 0x6a, 0xc2,
	0xc5, 0x9e, 0xbd, 0x57, 0xec, 0xc1, 0xa6, 0x68, 0x7d, 0xcb, 0x0b, 0x04, 0xea, 0xec, 0xbb, 0x3f,
	0xff, 0xfe, 0x51, 0x72, 0x3f, 0x56, 0xb5, 0x2e, 0x6f, 0x55, 0xf1, 0x74, 0xc3, 0x5f, 0x20, 0x18,
	0x8f, 0x34, 0x6f, 0x78, 0x61, 0x88, 0xc6, 0x50, 0x39, 0x3a, 0x98, 0x92, 0x84, 0x79, 0x98, 0xc3,
	0x3c, 0x80, 0xf7, 0x69, 0x5d, 0x9f, 0xd4, 0x02, 0xd7, 0x97, 0x08, 0xc6, 0xc2, 0x23, 0x86, 0xe7,
	0x7b, 0x3a, 0x5c, 0xd7, 0xe7, 0x29, 0x0b, 0x03, 0xe9, 0x48, 0x8c, 0xff, 0xe3, 0x18, 0x67, 0x71,
	0xbe, 0x0f, 0x8c, 0xda, 0x5d, 0xb3, 0x72, 0x0f, 0xff, 0x80, 0x60, 0x7b, 0x08, 0x34, 0xe8, 0xb4,
	0xf0, 0xff, 0xfb, 0x76, 0x1e, 0xeb, 0x08, 0x95, 0xe3, 0x03, 0xeb, 0x49, 0xe0, 0xa7, 0x38, 0xf0,
	0x63, 0x78, 0xa1, 0x0f, 0xe0, 0x85, 0x72, 0xb3, 0x50, 0x66, 0x76, 0xa5, 0x60, 0x56, 0x04, 0x87,
	0x1f, 0x11, 0x64, 0x3b, 0x35, 0x58, 0xf8, 0x54, 0x37, 0x48, 0x3d, 0x3a, 0x37, 0xe5, 0xf4, 0x70,
	0xca, 0x83, 0xec, 0x18, 0xd9, 0xce, 0xe0, 0xaf, 0x11, 0x6c, 0x6b, 0x6b, 0x31, 0xf0, 0xf1, 0xbe,
	0x36, 0xea, 0xfa, 0xe6, 0x47, 0x39, 0x31, 0xb8, 0xa2, 0xc4, 0x3c, 0xc3, 0x31, 0xef, 0xc3, 0x7b,
	0xbb, 0x61, 0x16, 0x5d, 0xcb, 0xa7, 0x08, 0xd2, 0xbc, 0x7d, 0xc0, 0x85, 0x9e, 0xee, 0xa2, 0x0d,
	0x89, 0x52, 0xec, 0x57, 0x7c, 0x90, 0x5d, 0x7d, 0xdb, 0x57, 0xd1, 0xee, 0xfa, 0xd0, 0xee, 0xe1,
	0x4f, 0x10, 0x8c, 0xb5, 0xba, 0x87, 0xd9, 0xde, 0xd1, 0x08, 0x64, 0x95, 0xf9, 0xfe, 0x65, 0x07,
	0x2b, 0x60, 0x16, 0x57, 0xc3, 0x9f, 0x23, 0x80, 0x48, 0x77, 0x71, 0xb8, 0x8f, 0x03, 0x13, 0x08,
	0xf7, 0x55, 0x12, 0xda, 0x5b, 0x92, 0x7e, 0xcb, 0x16, 0xd7, 0xc3, 0xdf, 0x21, 0x98, 0xdc, 0xb0,
	0xff, 0x38, 0xd6, 0xd3, 0xf5, 0x46, 0x6a, 0xca, 0x8b, 0x43, 0xa9, 0x85, 0xd8, 0xe7, 0x38, 0xf6,
	0xc3, 0x78, 0xa6, 0x77, 0x55, 0x28, 0x50, 0xae, 0x8f, 0x7f, 0x42, 0xb0, 0xb3, 0xd3, 0x4d, 0x7f,
	0xa2, 0x1f, 0x34, 0x1b, 0x69, 0x2a, 0x67, 0x86, 0xd5, 0x0c, 0xa9, 0x1c, 0xe5, 0x54, 0x8a, 0xf8,
	0x48, 0x37, 0x2a, 0x61, 0xd7, 0x2d, 0xd9, 0x94, 0xce, 0x3f, 0x78, 0x9c, 0x43, 0x0f, 0x1f, 0xe7,
	0xd0, 0x6f, 0x8f, 0x73, 0xe8, 0xc3, 0x27, 0xb9, 0xc4, 0xc3, 0x27, 0xb9, 0xc4, 0x2f, 0x4f, 0x72,
	0x89, 0x37, 0x8f, 0x44, 0x1f, 0x4c, 0xd4, 0x31, 0x0a, 0x26, 0xd3, 0x2c, 0x62, 0x30, 0xdb, 0x34,
	0x2a, 0xda, 0x9d, 0x96, 0x69, 0xfe, 0x74, 0x2a, 0x67, 0xf8, 0x3f, 0xac, 0x0b, 0x7f, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x66, 0xb8, 0xf3, 0x95, 0x52, 0x16, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the registry module params.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// List records
	ListRecords(ctx context.Context, in *QueryListRecordsRequest, opts ...grpc.CallOption) (*QueryListRecordsResponse, error)
	// Get record by id
	GetRecord(ctx context.Context, in *QueryRecordByIDRequest, opts ...grpc.CallOption) (*QueryRecordByIDResponse, error)
	// Get records by bond id
	GetRecordByBondID(ctx context.Context, in *QueryRecordByBondIDRequest, opts ...grpc.CallOption) (*QueryRecordByBondIDResponse, error)
	// Get registry module balance
	GetRegistryModuleBalance(ctx context.Context, in *GetRegistryModuleBalanceRequest, opts ...grpc.CallOption) (*GetRegistryModuleBalanceResponse, error)
	// List name records
	ListNameRecords(ctx context.Context, in *QueryListNameRecordsRequest, opts ...grpc.CallOption) (*QueryListNameRecordsResponse, error)
	// Whois method retrieve the name authority info
	Whois(ctx context.Context, in *QueryWhoisRequest, opts ...grpc.CallOption) (*QueryWhoisResponse, error)
	// LookupCrn
	LookupCrn(ctx context.Context, in *QueryLookupCrn, opts ...grpc.CallOption) (*QueryLookupCrnResponse, error)
	// ResolveCrn
	ResolveCrn(ctx context.Context, in *QueryResolveCrn, opts ...grpc.CallOption) (*QueryResolveCrnResponse, error)
	// GetRecordExpiryQueue
	GetRecordExpiryQueue(ctx context.Context, in *QueryGetRecordExpiryQueue, opts ...grpc.CallOption) (*QueryGetRecordExpiryQueueResponse, error)
	// GetAuthorityExpiryQueue
	GetAuthorityExpiryQueue(ctx context.Context, in *QueryGetAuthorityExpiryQueue, opts ...grpc.CallOption) (*QueryGetAuthorityExpiryQueueResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/vulcanize.registry.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListRecords(ctx context.Context, in *QueryListRecordsRequest, opts ...grpc.CallOption) (*QueryListRecordsResponse, error) {
	out := new(QueryListRecordsResponse)
	err := c.cc.Invoke(ctx, "/vulcanize.registry.v1beta1.Query/ListRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRecord(ctx context.Context, in *QueryRecordByIDRequest, opts ...grpc.CallOption) (*QueryRecordByIDResponse, error) {
	out := new(QueryRecordByIDResponse)
	err := c.cc.Invoke(ctx, "/vulcanize.registry.v1beta1.Query/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRecordByBondID(ctx context.Context, in *QueryRecordByBondIDRequest, opts ...grpc.CallOption) (*QueryRecordByBondIDResponse, error) {
	out := new(QueryRecordByBondIDResponse)
	err := c.cc.Invoke(ctx, "/vulcanize.registry.v1beta1.Query/GetRecordByBondID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRegistryModuleBalance(ctx context.Context, in *GetRegistryModuleBalanceRequest, opts ...grpc.CallOption) (*GetRegistryModuleBalanceResponse, error) {
	out := new(GetRegistryModuleBalanceResponse)
	err := c.cc.Invoke(ctx, "/vulcanize.registry.v1beta1.Query/GetRegistryModuleBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListNameRecords(ctx context.Context, in *QueryListNameRecordsRequest, opts ...grpc.CallOption) (*QueryListNameRecordsResponse, error) {
	out := new(QueryListNameRecordsResponse)
	err := c.cc.Invoke(ctx, "/vulcanize.registry.v1beta1.Query/ListNameRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Whois(ctx context.Context, in *QueryWhoisRequest, opts ...grpc.CallOption) (*QueryWhoisResponse, error) {
	out := new(QueryWhoisResponse)
	err := c.cc.Invoke(ctx, "/vulcanize.registry.v1beta1.Query/Whois", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LookupCrn(ctx context.Context, in *QueryLookupCrn, opts ...grpc.CallOption) (*QueryLookupCrnResponse, error) {
	out := new(QueryLookupCrnResponse)
	err := c.cc.Invoke(ctx, "/vulcanize.registry.v1beta1.Query/LookupCrn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ResolveCrn(ctx context.Context, in *QueryResolveCrn, opts ...grpc.CallOption) (*QueryResolveCrnResponse, error) {
	out := new(QueryResolveCrnResponse)
	err := c.cc.Invoke(ctx, "/vulcanize.registry.v1beta1.Query/ResolveCrn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRecordExpiryQueue(ctx context.Context, in *QueryGetRecordExpiryQueue, opts ...grpc.CallOption) (*QueryGetRecordExpiryQueueResponse, error) {
	out := new(QueryGetRecordExpiryQueueResponse)
	err := c.cc.Invoke(ctx, "/vulcanize.registry.v1beta1.Query/GetRecordExpiryQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAuthorityExpiryQueue(ctx context.Context, in *QueryGetAuthorityExpiryQueue, opts ...grpc.CallOption) (*QueryGetAuthorityExpiryQueueResponse, error) {
	out := new(QueryGetAuthorityExpiryQueueResponse)
	err := c.cc.Invoke(ctx, "/vulcanize.registry.v1beta1.Query/GetAuthorityExpiryQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the registry module params.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// List records
	ListRecords(context.Context, *QueryListRecordsRequest) (*QueryListRecordsResponse, error)
	// Get record by id
	GetRecord(context.Context, *QueryRecordByIDRequest) (*QueryRecordByIDResponse, error)
	// Get records by bond id
	GetRecordByBondID(context.Context, *QueryRecordByBondIDRequest) (*QueryRecordByBondIDResponse, error)
	// Get registry module balance
	GetRegistryModuleBalance(context.Context, *GetRegistryModuleBalanceRequest) (*GetRegistryModuleBalanceResponse, error)
	// List name records
	ListNameRecords(context.Context, *QueryListNameRecordsRequest) (*QueryListNameRecordsResponse, error)
	// Whois method retrieve the name authority info
	Whois(context.Context, *QueryWhoisRequest) (*QueryWhoisResponse, error)
	// LookupCrn
	LookupCrn(context.Context, *QueryLookupCrn) (*QueryLookupCrnResponse, error)
	// ResolveCrn
	ResolveCrn(context.Context, *QueryResolveCrn) (*QueryResolveCrnResponse, error)
	// GetRecordExpiryQueue
	GetRecordExpiryQueue(context.Context, *QueryGetRecordExpiryQueue) (*QueryGetRecordExpiryQueueResponse, error)
	// GetAuthorityExpiryQueue
	GetAuthorityExpiryQueue(context.Context, *QueryGetAuthorityExpiryQueue) (*QueryGetAuthorityExpiryQueueResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ListRecords(ctx context.Context, req *QueryListRecordsRequest) (*QueryListRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecords not implemented")
}
func (*UnimplementedQueryServer) GetRecord(ctx context.Context, req *QueryRecordByIDRequest) (*QueryRecordByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (*UnimplementedQueryServer) GetRecordByBondID(ctx context.Context, req *QueryRecordByBondIDRequest) (*QueryRecordByBondIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordByBondID not implemented")
}
func (*UnimplementedQueryServer) GetRegistryModuleBalance(ctx context.Context, req *GetRegistryModuleBalanceRequest) (*GetRegistryModuleBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistryModuleBalance not implemented")
}
func (*UnimplementedQueryServer) ListNameRecords(ctx context.Context, req *QueryListNameRecordsRequest) (*QueryListNameRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNameRecords not implemented")
}
func (*UnimplementedQueryServer) Whois(ctx context.Context, req *QueryWhoisRequest) (*QueryWhoisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whois not implemented")
}
func (*UnimplementedQueryServer) LookupCrn(ctx context.Context, req *QueryLookupCrn) (*QueryLookupCrnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupCrn not implemented")
}
func (*UnimplementedQueryServer) ResolveCrn(ctx context.Context, req *QueryResolveCrn) (*QueryResolveCrnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveCrn not implemented")
}
func (*UnimplementedQueryServer) GetRecordExpiryQueue(ctx context.Context, req *QueryGetRecordExpiryQueue) (*QueryGetRecordExpiryQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordExpiryQueue not implemented")
}
func (*UnimplementedQueryServer) GetAuthorityExpiryQueue(ctx context.Context, req *QueryGetAuthorityExpiryQueue) (*QueryGetAuthorityExpiryQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorityExpiryQueue not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vulcanize.registry.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vulcanize.registry.v1beta1.Query/ListRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListRecords(ctx, req.(*QueryListRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRecordByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vulcanize.registry.v1beta1.Query/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRecord(ctx, req.(*QueryRecordByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRecordByBondID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRecordByBondIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRecordByBondID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vulcanize.registry.v1beta1.Query/GetRecordByBondID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRecordByBondID(ctx, req.(*QueryRecordByBondIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRegistryModuleBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistryModuleBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRegistryModuleBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vulcanize.registry.v1beta1.Query/GetRegistryModuleBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRegistryModuleBalance(ctx, req.(*GetRegistryModuleBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListNameRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListNameRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListNameRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vulcanize.registry.v1beta1.Query/ListNameRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListNameRecords(ctx, req.(*QueryListNameRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Whois_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWhoisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Whois(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vulcanize.registry.v1beta1.Query/Whois",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Whois(ctx, req.(*QueryWhoisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LookupCrn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLookupCrn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LookupCrn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vulcanize.registry.v1beta1.Query/LookupCrn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LookupCrn(ctx, req.(*QueryLookupCrn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ResolveCrn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryResolveCrn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ResolveCrn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vulcanize.registry.v1beta1.Query/ResolveCrn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ResolveCrn(ctx, req.(*QueryResolveCrn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRecordExpiryQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRecordExpiryQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRecordExpiryQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vulcanize.registry.v1beta1.Query/GetRecordExpiryQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRecordExpiryQueue(ctx, req.(*QueryGetRecordExpiryQueue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAuthorityExpiryQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAuthorityExpiryQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAuthorityExpiryQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vulcanize.registry.v1beta1.Query/GetAuthorityExpiryQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAuthorityExpiryQueue(ctx, req.(*QueryGetAuthorityExpiryQueue))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vulcanize.registry.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ListRecords",
			Handler:    _Query_ListRecords_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _Query_GetRecord_Handler,
		},
		{
			MethodName: "GetRecordByBondID",
			Handler:    _Query_GetRecordByBondID_Handler,
		},
		{
			MethodName: "GetRegistryModuleBalance",
			Handler:    _Query_GetRegistryModuleBalance_Handler,
		},
		{
			MethodName: "ListNameRecords",
			Handler:    _Query_ListNameRecords_Handler,
		},
		{
			MethodName: "Whois",
			Handler:    _Query_Whois_Handler,
		},
		{
			MethodName: "LookupCrn",
			Handler:    _Query_LookupCrn_Handler,
		},
		{
			MethodName: "ResolveCrn",
			Handler:    _Query_ResolveCrn_Handler,
		},
		{
			MethodName: "GetRecordExpiryQueue",
			Handler:    _Query_GetRecordExpiryQueue_Handler,
		},
		{
			MethodName: "GetAuthorityExpiryQueue",
			Handler:    _Query_GetAuthorityExpiryQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vulcanize/registry/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.All {
		i--
		if m.All {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListRecordsRequest_LinkInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListRecordsRequest_LinkInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecordsRequest_LinkInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListRecordsRequest_ArrayInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListRecordsRequest_ArrayInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecordsRequest_ArrayInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListRecordsRequest_MapInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListRecordsRequest_MapInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecordsRequest_MapInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for k := range m.Values {
			v := m.Values[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListRecordsRequest_ValueInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListRecordsRequest_ValueInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecordsRequest_ValueInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListRecordsRequest_ValueInput_String_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecordsRequest_ValueInput_String_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.String_)
	copy(dAtA[i:], m.String_)
	i = encodeVarintQuery(dAtA, i, uint64(len(m.String_)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *QueryListRecordsRequest_ValueInput_Int) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecordsRequest_ValueInput_Int) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintQuery(dAtA, i, uint64(m.Int))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *QueryListRecordsRequest_ValueInput_Float) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecordsRequest_ValueInput_Float) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Float))))
	i--
	dAtA[i] = 0x19
	return len(dAtA) - i, nil
}
func (m *QueryListRecordsRequest_ValueInput_Boolean) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecordsRequest_ValueInput_Boolean) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Boolean {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *QueryListRecordsRequest_ValueInput_Link) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecordsRequest_ValueInput_Link) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Link)
	copy(dAtA[i:], m.Link)
	i = encodeVarintQuery(dAtA, i, uint64(len(m.Link)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *QueryListRecordsRequest_ValueInput_Array) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecordsRequest_ValueInput_Array) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Array != nil {
		{
			size, err := m.Array.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *QueryListRecordsRequest_ValueInput_Map) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecordsRequest_ValueInput_Map) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Map != nil {
		{
			size, err := m.Map.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *QueryListRecordsRequest_KeyValueInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListRecordsRequest_KeyValueInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecordsRequest_KeyValueInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRecordByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRecordByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRecordByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRecordByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRecordByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRecordByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRecordByBondIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRecordByBondIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRecordByBondIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRecordByBondIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRecordByBondIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRecordByBondIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetRegistryModuleBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRegistryModuleBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRegistryModuleBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetRegistryModuleBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRegistryModuleBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRegistryModuleBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balance) > 0 {
		for iNdEx := len(m.Balance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AccountName) > 0 {
		i -= len(m.AccountName)
		copy(dAtA[i:], m.AccountName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AccountName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListNameRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListNameRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListNameRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListNameRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListNameRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListNameRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Names) > 0 {
		for iNdEx := len(m.Names) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Names[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryWhoisRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhoisRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhoisRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWhoisResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhoisResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhoisResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NameAuthority.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLookupCrn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLookupCrn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLookupCrn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Crn) > 0 {
		i -= len(m.Crn)
		copy(dAtA[i:], m.Crn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Crn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLookupCrnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLookupCrnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLookupCrnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		{
			size, err := m.Name.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryResolveCrn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResolveCrn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResolveCrn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Crn) > 0 {
		i -= len(m.Crn)
		copy(dAtA[i:], m.Crn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Crn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryResolveCrnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResolveCrnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResolveCrnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRecordExpiryQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecordExpiryQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecordExpiryQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRecordExpiryQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecordExpiryQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecordExpiryQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ExpiryQueueRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpiryQueueRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpiryQueueRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Value[iNdEx])
			copy(dAtA[i:], m.Value[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Value[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAuthorityExpiryQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuthorityExpiryQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuthorityExpiryQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAuthorityExpiryQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuthorityExpiryQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuthorityExpiryQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authorities) > 0 {
		for iNdEx := len(m.Authorities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Authorities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.All {
		n += 2
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListRecordsRequest_LinkInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListRecordsRequest_ArrayInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryListRecordsRequest_MapInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for k, v := range m.Values {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryListRecordsRequest_ValueInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *QueryListRecordsRequest_ValueInput_String_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.String_)
	n += 1 + l + sovQuery(uint64(l))
	return n
}
func (m *QueryListRecordsRequest_ValueInput_Int) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQuery(uint64(m.Int))
	return n
}
func (m *QueryListRecordsRequest_ValueInput_Float) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *QueryListRecordsRequest_ValueInput_Boolean) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *QueryListRecordsRequest_ValueInput_Link) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Link)
	n += 1 + l + sovQuery(uint64(l))
	return n
}
func (m *QueryListRecordsRequest_ValueInput_Array) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Array != nil {
		l = m.Array.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}
func (m *QueryListRecordsRequest_ValueInput_Map) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Map != nil {
		l = m.Map.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}
func (m *QueryListRecordsRequest_KeyValueInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRecordByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRecordByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Record.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRecordByBondIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRecordByBondIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetRegistryModuleBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetRegistryModuleBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AccountBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Balance) > 0 {
		for _, e := range m.Balance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryListNameRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListNameRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, e := range m.Names {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWhoisRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWhoisResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NameAuthority.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLookupCrn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLookupCrnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryResolveCrn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryResolveCrnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRecordExpiryQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRecordExpiryQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ExpiryQueueRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Value) > 0 {
		for _, s := range m.Value {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetAuthorityExpiryQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAuthorityExpiryQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Authorities) > 0 {
		for _, e := range m.Authorities {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &QueryListRecordsRequest_KeyValueInput{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.All = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListRecordsRequest_LinkInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListRecordsRequest_ArrayInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArrayInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArrayInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &QueryListRecordsRequest_ValueInput{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListRecordsRequest_MapInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Values == nil {
				m.Values = make(map[string]*QueryListRecordsRequest_ValueInput)
			}
			var mapkey string
			var mapvalue *QueryListRecordsRequest_ValueInput
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &QueryListRecordsRequest_ValueInput{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Values[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListRecordsRequest_ValueInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &QueryListRecordsRequest_ValueInput_String_{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &QueryListRecordsRequest_ValueInput_Int{v}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = &QueryListRecordsRequest_ValueInput_Float{float64(math.Float64frombits(v))}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boolean", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &QueryListRecordsRequest_ValueInput_Boolean{b}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &QueryListRecordsRequest_ValueInput_Link{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Array", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryListRecordsRequest_ArrayInput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &QueryListRecordsRequest_ValueInput_Array{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryListRecordsRequest_MapInput{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &QueryListRecordsRequest_ValueInput_Map{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListRecordsRequest_KeyValueInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValueInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValueInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &QueryListRecordsRequest_ValueInput{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, Record{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRecordByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRecordByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRecordByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRecordByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRecordByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRecordByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRecordByBondIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRecordByBondIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRecordByBondIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRecordByBondIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRecordByBondIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRecordByBondIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, Record{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRegistryModuleBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRegistryModuleBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRegistryModuleBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRegistryModuleBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRegistryModuleBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRegistryModuleBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, &AccountBalance{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = append(m.Balance, types.Coin{})
			if err := m.Balance[len(m.Balance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListNameRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListNameRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListNameRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListNameRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListNameRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListNameRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, NameEntry{})
			if err := m.Names[len(m.Names)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhoisRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhoisRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhoisRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhoisResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhoisResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhoisResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameAuthority", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NameAuthority.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLookupCrn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLookupCrn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLookupCrn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLookupCrnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLookupCrnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLookupCrnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &NameRecord{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResolveCrn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResolveCrn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResolveCrn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResolveCrnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResolveCrnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResolveCrnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &Record{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecordExpiryQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecordExpiryQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecordExpiryQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecordExpiryQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecordExpiryQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecordExpiryQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &ExpiryQueueRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpiryQueueRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpiryQueueRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpiryQueueRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuthorityExpiryQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuthorityExpiryQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuthorityExpiryQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuthorityExpiryQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuthorityExpiryQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuthorityExpiryQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authorities = append(m.Authorities, &ExpiryQueueRecord{})
			if err := m.Authorities[len(m.Authorities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
