// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vulcanize/nameservice/v1beta1/attributes.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ServiceProviderRegistration struct {
	BondId    string `protobuf:"bytes,1,opt,name=bond_id,json=bondId,proto3" json:"bond_id,omitempty" json:"bondId" yaml:"bondId"`
	LaconicId string `protobuf:"bytes,2,opt,name=laconic_id,json=laconicId,proto3" json:"laconic_id,omitempty" json:"laconicId" yaml:"laconicId"`
	X500      *X500  `protobuf:"bytes,3,opt,name=x500,proto3" json:"x500,omitempty" json:"x500" yaml:"x500"`
	Type      string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty" json:"type" yaml:"type"`
}

func (m *ServiceProviderRegistration) Reset()         { *m = ServiceProviderRegistration{} }
func (m *ServiceProviderRegistration) String() string { return proto.CompactTextString(m) }
func (*ServiceProviderRegistration) ProtoMessage()    {}
func (*ServiceProviderRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f2d1895d048a86a, []int{0}
}
func (m *ServiceProviderRegistration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceProviderRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceProviderRegistration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceProviderRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceProviderRegistration.Merge(m, src)
}
func (m *ServiceProviderRegistration) XXX_Size() int {
	return m.Size()
}
func (m *ServiceProviderRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceProviderRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceProviderRegistration proto.InternalMessageInfo

func (m *ServiceProviderRegistration) GetBondId() string {
	if m != nil {
		return m.BondId
	}
	return ""
}

func (m *ServiceProviderRegistration) GetLaconicId() string {
	if m != nil {
		return m.LaconicId
	}
	return ""
}

func (m *ServiceProviderRegistration) GetX500() *X500 {
	if m != nil {
		return m.X500
	}
	return nil
}

func (m *ServiceProviderRegistration) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type X500 struct {
	CommonName       string `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty" json:"commonName" yaml:"commonName"`
	OrganizationUnit string `protobuf:"bytes,2,opt,name=organization_unit,json=organizationUnit,proto3" json:"organization_unit,omitempty" json:"organizationUnit" yaml:"organizationUnit"`
	OrganizationName string `protobuf:"bytes,3,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty" json:"organizationName" yaml:"organizationName"`
	LocalityName     string `protobuf:"bytes,4,opt,name=locality_name,json=localityName,proto3" json:"locality_name,omitempty" json:"localityName" yaml:"localityName"`
	StateName        string `protobuf:"bytes,5,opt,name=state_name,json=stateName,proto3" json:"state_name,omitempty" json:"stateName" yaml:"stateName"`
	Country          string `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty" json:"country" yaml:"country"`
}

func (m *X500) Reset()         { *m = X500{} }
func (m *X500) String() string { return proto.CompactTextString(m) }
func (*X500) ProtoMessage()    {}
func (*X500) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f2d1895d048a86a, []int{1}
}
func (m *X500) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *X500) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_X500.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *X500) XXX_Merge(src proto.Message) {
	xxx_messageInfo_X500.Merge(m, src)
}
func (m *X500) XXX_Size() int {
	return m.Size()
}
func (m *X500) XXX_DiscardUnknown() {
	xxx_messageInfo_X500.DiscardUnknown(m)
}

var xxx_messageInfo_X500 proto.InternalMessageInfo

func (m *X500) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *X500) GetOrganizationUnit() string {
	if m != nil {
		return m.OrganizationUnit
	}
	return ""
}

func (m *X500) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *X500) GetLocalityName() string {
	if m != nil {
		return m.LocalityName
	}
	return ""
}

func (m *X500) GetStateName() string {
	if m != nil {
		return m.StateName
	}
	return ""
}

func (m *X500) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

type WebsiteRegistrationRecord struct {
	Url                       string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty" json:"url" yaml:"url"`
	RepoRegistrationRecordCid string `protobuf:"bytes,2,opt,name=repo_registration_record_cid,json=repoRegistrationRecordCid,proto3" json:"repo_registration_record_cid,omitempty" json:"repoRegistrationRecordCID" yaml:"repoRegistrationRecordCID"`
	BuildArtifactCid          string `protobuf:"bytes,3,opt,name=build_artifact_cid,json=buildArtifactCid,proto3" json:"build_artifact_cid,omitempty" json:"buildArtifactCID" yaml:"buildArtifactCID"`
	TlsCertCid                string `protobuf:"bytes,4,opt,name=tls_cert_cid,json=tlsCertCid,proto3" json:"tls_cert_cid,omitempty" json:"TLSCertCID" yaml:"TLSCertCID"`
	Type                      string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty" json:"type" yaml:"type"`
}

func (m *WebsiteRegistrationRecord) Reset()         { *m = WebsiteRegistrationRecord{} }
func (m *WebsiteRegistrationRecord) String() string { return proto.CompactTextString(m) }
func (*WebsiteRegistrationRecord) ProtoMessage()    {}
func (*WebsiteRegistrationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f2d1895d048a86a, []int{2}
}
func (m *WebsiteRegistrationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebsiteRegistrationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebsiteRegistrationRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebsiteRegistrationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebsiteRegistrationRecord.Merge(m, src)
}
func (m *WebsiteRegistrationRecord) XXX_Size() int {
	return m.Size()
}
func (m *WebsiteRegistrationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_WebsiteRegistrationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_WebsiteRegistrationRecord proto.InternalMessageInfo

func (m *WebsiteRegistrationRecord) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *WebsiteRegistrationRecord) GetRepoRegistrationRecordCid() string {
	if m != nil {
		return m.RepoRegistrationRecordCid
	}
	return ""
}

func (m *WebsiteRegistrationRecord) GetBuildArtifactCid() string {
	if m != nil {
		return m.BuildArtifactCid
	}
	return ""
}

func (m *WebsiteRegistrationRecord) GetTlsCertCid() string {
	if m != nil {
		return m.TlsCertCid
	}
	return ""
}

func (m *WebsiteRegistrationRecord) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func init() {
	proto.RegisterType((*ServiceProviderRegistration)(nil), "vulcanize.nameservice.v1beta1.ServiceProviderRegistration")
	proto.RegisterType((*X500)(nil), "vulcanize.nameservice.v1beta1.X500")
	proto.RegisterType((*WebsiteRegistrationRecord)(nil), "vulcanize.nameservice.v1beta1.WebsiteRegistrationRecord")
}

func init() {
	proto.RegisterFile("vulcanize/nameservice/v1beta1/attributes.proto", fileDescriptor_7f2d1895d048a86a)
}

var fileDescriptor_7f2d1895d048a86a = []byte{
	// 645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4d, 0x4f, 0x14, 0x31,
	0x18, 0xc7, 0x59, 0x76, 0x81, 0x50, 0x30, 0xc1, 0x46, 0xe3, 0x22, 0xb2, 0x03, 0x4b, 0x0c, 0x24,
	0xc4, 0x99, 0x45, 0x42, 0x62, 0xf4, 0xc4, 0x8b, 0x89, 0x9b, 0x18, 0x43, 0x0a, 0x46, 0xe3, 0x65,
	0xec, 0x74, 0xea, 0x5a, 0x33, 0x3b, 0x25, 0x9d, 0xce, 0x86, 0xf5, 0x03, 0x78, 0xf6, 0x43, 0xf8,
	0x01, 0xfc, 0x18, 0x1e, 0x39, 0x7a, 0x9a, 0x18, 0x38, 0x79, 0x9d, 0x4f, 0x60, 0xda, 0xce, 0xcc,
	0x76, 0xd9, 0x40, 0xbc, 0x3d, 0xfd, 0x3f, 0xff, 0xe7, 0xf7, 0xf4, 0x1d, 0xb8, 0x83, 0x34, 0x22,
	0x38, 0x66, 0x5f, 0xa9, 0x17, 0xe3, 0x3e, 0x4d, 0xa8, 0x18, 0x30, 0x42, 0xbd, 0xc1, 0x4e, 0x40,
	0x25, 0xde, 0xf1, 0xb0, 0x94, 0x82, 0x05, 0xa9, 0xa4, 0x89, 0x7b, 0x26, 0xb8, 0xe4, 0x70, 0xb5,
	0xf2, 0xbb, 0x96, 0xdf, 0x2d, 0xfc, 0x0f, 0xef, 0xf5, 0x78, 0x8f, 0x6b, 0xa7, 0xa7, 0x22, 0x53,
	0xd4, 0xfe, 0x31, 0x0d, 0x56, 0x4e, 0x8c, 0xf3, 0x58, 0xf0, 0x01, 0x0b, 0xa9, 0x40, 0xb4, 0xc7,
	0x12, 0x29, 0xb0, 0x64, 0x3c, 0x86, 0xcf, 0xc0, 0x5c, 0xc0, 0xe3, 0xd0, 0x67, 0x61, 0xb3, 0xb6,
	0x56, 0xdb, 0x9a, 0x3f, 0x70, 0xf2, 0xcc, 0x59, 0xf9, 0x92, 0xf0, 0xf8, 0x79, 0x5b, 0x25, 0xba,
	0x61, 0x7b, 0x6d, 0x88, 0xfb, 0x51, 0x35, 0x42, 0xb3, 0x26, 0x80, 0x47, 0x00, 0x44, 0x98, 0xf0,
	0x98, 0x11, 0x55, 0x3c, 0xad, 0x8b, 0x1f, 0xe7, 0x99, 0xb3, 0x6e, 0x8a, 0x8b, 0xdc, 0xa8, 0x7e,
	0x24, 0xa0, 0xf9, 0x2a, 0x86, 0xa7, 0xa0, 0x71, 0xbe, 0xd7, 0xe9, 0x34, 0xeb, 0x6b, 0xb5, 0xad,
	0x85, 0xa7, 0x1b, 0xee, 0xad, 0x6b, 0x74, 0xdf, 0xef, 0x75, 0x3a, 0x07, 0x2b, 0x79, 0xe6, 0x3c,
	0x30, 0x4d, 0x54, 0x69, 0xc9, 0xd7, 0x31, 0xd2, 0x34, 0xe8, 0x81, 0x86, 0x1c, 0x9e, 0xd1, 0x66,
	0x43, 0xcf, 0xca, 0x2a, 0x50, 0x6a, 0x59, 0xa0, 0x63, 0xa4, 0x8d, 0xed, 0xbf, 0x75, 0xd0, 0x50,
	0x70, 0xf8, 0x0a, 0x2c, 0x10, 0xde, 0xef, 0xf3, 0xd8, 0x57, 0xfd, 0x8b, 0x3d, 0xd9, 0xcc, 0x33,
	0x67, 0xc3, 0x00, 0x4c, 0xf2, 0x0d, 0xee, 0x57, 0x18, 0x4b, 0x41, 0x60, 0x34, 0x80, 0x1f, 0xc1,
	0x5d, 0x2e, 0x7a, 0x6a, 0x2d, 0x7a, 0xa7, 0xfd, 0x34, 0x66, 0xb2, 0xd8, 0xa6, 0xdd, 0x3c, 0x73,
	0x3c, 0xc3, 0xb3, 0x2d, 0x6f, 0x63, 0x26, 0x4b, 0xea, 0x84, 0x8e, 0x96, 0xae, 0x4b, 0x13, 0x1d,
	0xf4, 0x8c, 0xeb, 0xb7, 0x75, 0xb0, 0xe7, 0x3d, 0xa1, 0x8f, 0x77, 0xd0, 0x6b, 0x38, 0x06, 0x77,
	0x22, 0x4e, 0x70, 0xc4, 0xe4, 0xd0, 0xd0, 0xcd, 0x86, 0x6e, 0xe7, 0x99, 0xb3, 0x59, 0x1c, 0x73,
	0x91, 0xb6, 0xc9, 0x63, 0x1a, 0x5a, 0xb4, 0x87, 0xea, 0xd6, 0x24, 0x12, 0x4b, 0x6a, 0x70, 0x33,
	0xd7, 0x6f, 0x8d, 0xce, 0xd9, 0xac, 0x91, 0x80, 0xe6, 0xab, 0x18, 0xbe, 0x00, 0x73, 0x84, 0xa7,
	0xb1, 0x14, 0xc3, 0xe6, 0xac, 0x46, 0xac, 0xe7, 0x99, 0xb3, 0x5a, 0x9e, 0x90, 0x4e, 0x8c, 0x8e,
	0xc7, 0x0c, 0x51, 0x59, 0xd1, 0xfe, 0x59, 0x07, 0xcb, 0xef, 0x68, 0x90, 0x30, 0x49, 0xed, 0xa7,
	0x80, 0x28, 0xe1, 0x22, 0x84, 0xdb, 0xa0, 0x9e, 0x8a, 0xa8, 0x38, 0xf8, 0xe5, 0x3c, 0x73, 0xee,
	0x1b, 0x6c, 0x2a, 0xa2, 0x12, 0xa9, 0x42, 0xa4, 0x5c, 0xf0, 0x5b, 0x0d, 0x3c, 0x12, 0xf4, 0x8c,
	0xfb, 0xc2, 0x02, 0xf9, 0x42, 0x93, 0x7c, 0x52, 0x3d, 0x8b, 0x97, 0x79, 0xe6, 0xec, 0x1b, 0x8c,
	0x72, 0x4f, 0x76, 0x3d, 0xec, 0x1e, 0x95, 0xf0, 0x9b, 0x0d, 0x68, 0xf9, 0x86, 0x1c, 0x0b, 0x21,
	0x06, 0x30, 0x48, 0x59, 0x14, 0xfa, 0x58, 0x48, 0xf6, 0x09, 0x13, 0xa9, 0xbb, 0x4f, 0xdc, 0x05,
	0xed, 0xd9, 0x2f, 0x2c, 0x56, 0xd3, 0x09, 0x1d, 0x2d, 0x8d, 0x4b, 0x2c, 0x84, 0x5d, 0xb0, 0x28,
	0xa3, 0xc4, 0x27, 0x54, 0x18, 0x78, 0xe3, 0xfa, 0xd3, 0x38, 0x7d, 0x7d, 0x72, 0x48, 0x85, 0x8d,
	0xb5, 0x14, 0x04, 0x64, 0x94, 0xe8, 0x01, 0x0b, 0xab, 0xe7, 0x39, 0xf3, 0x9f, 0xcf, 0xf3, 0xa0,
	0xfb, 0xeb, 0xb2, 0x55, 0xbb, 0xb8, 0x6c, 0xd5, 0xfe, 0x5c, 0xb6, 0x6a, 0xdf, 0xaf, 0x5a, 0x53,
	0x17, 0x57, 0xad, 0xa9, 0xdf, 0x57, 0xad, 0xa9, 0x0f, 0x5e, 0x8f, 0xc9, 0xcf, 0x69, 0xe0, 0x12,
	0xde, 0xf7, 0x08, 0x15, 0xe4, 0x09, 0xe3, 0x5e, 0xf1, 0xbb, 0x84, 0xde, 0xf9, 0xd8, 0xc7, 0xaa,
	0x48, 0x49, 0x30, 0xab, 0xff, 0xc5, 0xdd, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x80, 0xa1, 0x70,
	0x3a, 0x7e, 0x05, 0x00, 0x00,
}

func (m *ServiceProviderRegistration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceProviderRegistration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceProviderRegistration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if m.X500 != nil {
		{
			size, err := m.X500.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttributes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LaconicId) > 0 {
		i -= len(m.LaconicId)
		copy(dAtA[i:], m.LaconicId)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.LaconicId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BondId) > 0 {
		i -= len(m.BondId)
		copy(dAtA[i:], m.BondId)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.BondId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *X500) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *X500) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *X500) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StateName) > 0 {
		i -= len(m.StateName)
		copy(dAtA[i:], m.StateName)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.StateName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LocalityName) > 0 {
		i -= len(m.LocalityName)
		copy(dAtA[i:], m.LocalityName)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.LocalityName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrganizationName) > 0 {
		i -= len(m.OrganizationName)
		copy(dAtA[i:], m.OrganizationName)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.OrganizationName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrganizationUnit) > 0 {
		i -= len(m.OrganizationUnit)
		copy(dAtA[i:], m.OrganizationUnit)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.OrganizationUnit)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CommonName) > 0 {
		i -= len(m.CommonName)
		copy(dAtA[i:], m.CommonName)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.CommonName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WebsiteRegistrationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebsiteRegistrationRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebsiteRegistrationRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TlsCertCid) > 0 {
		i -= len(m.TlsCertCid)
		copy(dAtA[i:], m.TlsCertCid)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.TlsCertCid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BuildArtifactCid) > 0 {
		i -= len(m.BuildArtifactCid)
		copy(dAtA[i:], m.BuildArtifactCid)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.BuildArtifactCid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RepoRegistrationRecordCid) > 0 {
		i -= len(m.RepoRegistrationRecordCid)
		copy(dAtA[i:], m.RepoRegistrationRecordCid)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.RepoRegistrationRecordCid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintAttributes(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAttributes(dAtA []byte, offset int, v uint64) int {
	offset -= sovAttributes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServiceProviderRegistration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondId)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.LaconicId)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	if m.X500 != nil {
		l = m.X500.Size()
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func (m *X500) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommonName)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.OrganizationUnit)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.OrganizationName)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.LocalityName)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.StateName)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func (m *WebsiteRegistrationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.RepoRegistrationRecordCid)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.BuildArtifactCid)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.TlsCertCid)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttributes(uint64(l))
	}
	return n
}

func sovAttributes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAttributes(x uint64) (n int) {
	return sovAttributes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServiceProviderRegistration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceProviderRegistration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceProviderRegistration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaconicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LaconicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field X500", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.X500 == nil {
				m.X500 = &X500{}
			}
			if err := m.X500.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *X500) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: X500: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: X500: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommonName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationUnit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebsiteRegistrationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebsiteRegistrationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebsiteRegistrationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoRegistrationRecordCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepoRegistrationRecordCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildArtifactCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildArtifactCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCertCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsCertCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAttributes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAttributes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttributes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAttributes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAttributes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAttributes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAttributes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAttributes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAttributes = fmt.Errorf("proto: unexpected end of group")
)
